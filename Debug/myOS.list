
myOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ac  080040ac  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040b4  080040b4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080040bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000008c  08004148  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08004148  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f19e  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000280f  00000000  00000000  0002f25a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  00031a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000850  00000000  00000000  000323f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024396  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a67b  00000000  00000000  00056fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d20af  00000000  00000000  00061651  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002650  00000000  00000000  0013377c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003e40 	.word	0x08003e40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08003e40 	.word	0x08003e40

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a23      	ldr	r2, [pc, #140]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_GPIO_Init+0xc8>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000610:	4816      	ldr	r0, [pc, #88]	; (800066c <MX_GPIO_Init+0xcc>)
 8000612:	f001 fe43 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = usr_key_Pin;
 8000616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_GPIO_Init+0xd0>)
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(usr_key_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	4619      	mov	r1, r3
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_GPIO_Init+0xd4>)
 800062c:	f001 fc8c 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH10 PH11 PH12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000630:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4619      	mov	r1, r3
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <MX_GPIO_Init+0xcc>)
 800064a:	f001 fc7d 	bl	8001f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2028      	movs	r0, #40	; 0x28
 8000654:	f001 fc41 	bl	8001eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000658:	2028      	movs	r0, #40	; 0x28
 800065a:	f001 fc5a 	bl	8001f12 <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40021c00 	.word	0x40021c00
 8000670:	10110000 	.word	0x10110000
 8000674:	40020800 	.word	0x40020800

08000678 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
	printf("user key pressed!\r\n");
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <HAL_GPIO_EXTI_Callback+0x18>)
 8000684:	f000 fa9c 	bl	8000bc0 <puts>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	08003e58 	.word	0x08003e58

08000694 <main>:
  * @retval int
  */


int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 fae6 	bl	8001c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f818 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f7ff ff7e 	bl	80005a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006a4:	f000 f922 	bl	80008ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_11, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ae:	4807      	ldr	r0, [pc, #28]	; (80006cc <main+0x38>)
 80006b0:	f001 fdf4 	bl	800229c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <main+0x38>)
 80006bc:	f001 fdee 	bl	800229c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  extern void task_sample_entry(void);
  task_sample_entry();
 80006c0:	f001 fa50 	bl	8001b64 <task_sample_entry>
 80006c4:	2300      	movs	r3, #0
//  extern void msg_queue_sample_entry(void);
//  msg_queue_sample_entry();

//  extern void memory_sample_entry(void);
//  memory_sample_entry();
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021c00 	.word	0x40021c00

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 ff7b 	bl	80035da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <SystemClock_Config+0xd8>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xd8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemClock_Config+0xdc>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a24      	ldr	r2, [pc, #144]	; (80007ac <SystemClock_Config+0xdc>)
 800071a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xdc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000740:	230f      	movs	r3, #15
 8000742:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000744:	23d8      	movs	r3, #216	; 0xd8
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fe23 	bl	80023a0 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000760:	f000 f826 	bl	80007b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000764:	f001 fdcc 	bl	8002300 <HAL_PWREx_EnableOverDrive>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800076e:	f000 f81f 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2105      	movs	r1, #5
 8000790:	4618      	mov	r0, r3
 8000792:	f002 f875 	bl	8002880 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800079c:	f000 f808 	bl	80007b0 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <Error_Handler+0x6>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <HAL_MspInit+0x4c>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x4c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	//HAL_Delay(10);  //prevent trembling

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000846:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800084a:	f001 fd41 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800085c:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <_sbrk+0x5c>)
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <_sbrk+0x60>)
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <_sbrk+0x64>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <_sbrk+0x64>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <_sbrk+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	429a      	cmp	r2, r3
 8000882:	d207      	bcs.n	8000894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000884:	f002 fe74 	bl	8003570 <__errno>
 8000888:	4602      	mov	r2, r0
 800088a:	230c      	movs	r3, #12
 800088c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800088e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000892:	e009      	b.n	80008a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <_sbrk+0x64>)
 80008a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20030000 	.word	0x20030000
 80008b4:	00000400 	.word	0x00000400
 80008b8:	200000a8 	.word	0x200000a8
 80008bc:	200001a0 	.word	0x200001a0

080008c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <SystemInit+0x28>)
 80008c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ca:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <SystemInit+0x28>)
 80008cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SystemInit+0x28>)
 80008d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008da:	609a      	str	r2, [r3, #8]
#endif
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART1_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000924:	f002 f978 	bl	8002c18 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f7ff ff3f 	bl	80007b0 <Error_Handler>
  }

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000138 	.word	0x20000138
 800093c:	40011000 	.word	0x40011000

08000940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_UART_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12c      	bne.n	80009bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <HAL_UART_MspInit+0x88>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800099a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ac:	2307      	movs	r3, #7
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_UART_MspInit+0x8c>)
 80009b8:	f001 fac6 	bl	8001f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40011000 	.word	0x40011000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <_write>:
  }
}

/* USER CODE BEGIN 1 */
__attribute__((used)) int _write(int file, char *ptr, int len)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <_write+0x28>)
 80009e8:	f002 f963 	bl	8002cb2 <HAL_UART_Transmit>
    return len;
 80009ec:	687b      	ldr	r3, [r7, #4]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000138 	.word	0x20000138

080009fc <heap_init>:
 * Output:
 * result:     0 - ok
 *             1 - fail
 */
err_t heap_init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
    extern uint32_t _end; /* Symbol defined in the linker script */
    extern uint32_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */

    heap_start = (uint32_t)&_end;
 8000a02:	4a2a      	ldr	r2, [pc, #168]	; (8000aac <heap_init+0xb0>)
 8000a04:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <heap_init+0xb4>)
 8000a06:	601a      	str	r2, [r3, #0]
    heap_end = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <heap_init+0xb8>)
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <heap_init+0xbc>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <heap_init+0xc0>)
 8000a10:	6013      	str	r3, [r2, #0]

    if (heap_end - heap_start <= SIZEOF_MEM) {
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <heap_init+0xc0>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <heap_init+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	2b10      	cmp	r3, #16
 8000a1e:	d804      	bhi.n	8000a2a <heap_init+0x2e>
        printf("heap too small!\r\n");
 8000a20:	4827      	ldr	r0, [pc, #156]	; (8000ac0 <heap_init+0xc4>)
 8000a22:	f000 f8cd 	bl	8000bc0 <puts>
        return ERR_FAIL;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e03c      	b.n	8000aa4 <heap_init+0xa8>
    }

    p_mem_t mem = (p_mem_t)(heap_end - SIZEOF_MEM);
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <heap_init+0xc0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3b10      	subs	r3, #16
 8000a30:	607b      	str	r3, [r7, #4]
    mem->magic = MAGIC;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8000a38:	801a      	strh	r2, [r3, #0]
    mem->used = 1;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	805a      	strh	r2, [r3, #2]
    mem->size = 0;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
    mem->next = 0;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
    mem->prev = heap_start;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <heap_init+0xb4>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	609a      	str	r2, [r3, #8]

    mem = (p_mem_t)heap_start;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <heap_init+0xb4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	607b      	str	r3, [r7, #4]
    mem->magic = MAGIC;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8000a60:	801a      	strh	r2, [r3, #0]
    mem->used = 0;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	805a      	strh	r2, [r3, #2]
    mem->size = heap_end - heap_start - 2 * SIZEOF_MEM;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <heap_init+0xc0>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <heap_init+0xb4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	f1a3 0220 	sub.w	r2, r3, #32
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	605a      	str	r2, [r3, #4]
    mem->next = heap_end - SIZEOF_MEM;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <heap_init+0xc0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f1a3 0210 	sub.w	r2, r3, #16
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	60da      	str	r2, [r3, #12]
    mem->prev = 0;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]

    if (mutex_create(&heap_mutex) != ERR_OK) {
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <heap_init+0xc8>)
 8000a8e:	f000 f9da 	bl	8000e46 <mutex_create>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d004      	beq.n	8000aa2 <heap_init+0xa6>
        printf("heap mutex create fail!\r\n");
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <heap_init+0xcc>)
 8000a9a:	f000 f891 	bl	8000bc0 <puts>
        return ERR_FAIL;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <heap_init+0xa8>
    }

    return ERR_OK;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001a0 	.word	0x200001a0
 8000ab0:	20000178 	.word	0x20000178
 8000ab4:	20030000 	.word	0x20030000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	2000017c 	.word	0x2000017c
 8000ac0:	08003e6c 	.word	0x08003e6c
 8000ac4:	20000180 	.word	0x20000180
 8000ac8:	08003e80 	.word	0x08003e80

08000acc <os_malloc>:
 * in_size: size to malloc
 * Output:
 * malloced address, or NULL if malloc is failed.
 */
void *os_malloc(uint32_t in_size)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    p_mem_t mem = (p_mem_t)heap_start;
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <os_malloc+0xe4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	61fb      	str	r3, [r7, #28]
    uint32_t size = ALIGN(in_size, 4);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3303      	adds	r3, #3
 8000ade:	f023 0303 	bic.w	r3, r3, #3
 8000ae2:	61bb      	str	r3, [r7, #24]

    mutex_take(&heap_mutex, WAIT_FOREVER);
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae8:	4832      	ldr	r0, [pc, #200]	; (8000bb4 <os_malloc+0xe8>)
 8000aea:	f000 f9d3 	bl	8000e94 <mutex_take>

    while (mem != NULL && (mem->used || mem->size < size)) {
 8000aee:	e002      	b.n	8000af6 <os_malloc+0x2a>
        mem = (p_mem_t)(mem->next);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	61fb      	str	r3, [r7, #28]
    while (mem != NULL && (mem->used || mem->size < size)) {
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d008      	beq.n	8000b0e <os_malloc+0x42>
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	885b      	ldrh	r3, [r3, #2]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f5      	bne.n	8000af0 <os_malloc+0x24>
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d8f0      	bhi.n	8000af0 <os_malloc+0x24>
    }

    if (mem == NULL) {
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d105      	bne.n	8000b20 <os_malloc+0x54>
        printf("Not enough heap memory left to malloc %lu bytes.\r\n", size);
 8000b14:	69b9      	ldr	r1, [r7, #24]
 8000b16:	4828      	ldr	r0, [pc, #160]	; (8000bb8 <os_malloc+0xec>)
 8000b18:	f000 f864 	bl	8000be4 <printf>
        return NULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e042      	b.n	8000ba6 <os_malloc+0xda>
    } else {
        //check magic
        if (mem->magic != MAGIC) {
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d004      	beq.n	8000b36 <os_malloc+0x6a>
            printf("memory is corrupted during malloc!\r\n");
 8000b2c:	4823      	ldr	r0, [pc, #140]	; (8000bbc <os_malloc+0xf0>)
 8000b2e:	f000 f847 	bl	8000bc0 <puts>
            return NULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e037      	b.n	8000ba6 <os_malloc+0xda>
        }

        if (size == mem->size) {
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d103      	bne.n	8000b48 <os_malloc+0x7c>
            //whole block is assigned to this malloc
            mem->used = 1;
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	2201      	movs	r2, #1
 8000b44:	805a      	strh	r2, [r3, #2]
 8000b46:	e029      	b.n	8000b9c <os_malloc+0xd0>
        } else {
            //split into two parts
            uint32_t cur_next = mem->next;
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	617b      	str	r3, [r7, #20]
            uint32_t cur_size = mem->size;
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	613b      	str	r3, [r7, #16]

            mem->size = size;
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	605a      	str	r2, [r3, #4]
            mem->used = 1;
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	805a      	strh	r2, [r3, #2]
            mem->next = (uint32_t)mem + SIZEOF_MEM + size;
 8000b60:	69fa      	ldr	r2, [r7, #28]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4413      	add	r3, r2
 8000b66:	f103 0210 	add.w	r2, r3, #16
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	60da      	str	r2, [r3, #12]

            p_mem_t mem_next = (p_mem_t)mem->next;
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	60fb      	str	r3, [r7, #12]
            mem_next->magic = MAGIC;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f64a 32cd 	movw	r2, #43981	; 0xabcd
 8000b7a:	801a      	strh	r2, [r3, #0]
            mem_next->used = 0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	805a      	strh	r2, [r3, #2]
            mem_next->next = cur_next;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	60da      	str	r2, [r3, #12]
            mem_next->prev = (uint32_t)mem;
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	609a      	str	r2, [r3, #8]
            mem_next->size = cur_size - size - SIZEOF_MEM;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	f1a3 0210 	sub.w	r2, r3, #16
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	605a      	str	r2, [r3, #4]
        }
    }

    mutex_release(&heap_mutex);
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <os_malloc+0xe8>)
 8000b9e:	f000 f9ff 	bl	8000fa0 <mutex_release>

    return (void *)((uint32_t)mem + SIZEOF_MEM);
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3310      	adds	r3, #16
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000178 	.word	0x20000178
 8000bb4:	20000180 	.word	0x20000180
 8000bb8:	08003e9c 	.word	0x08003e9c
 8000bbc:	08003ed0 	.word	0x08003ed0

08000bc0 <puts>:
    return;
}

//pure string ends with '\n' will call puts(), optimized by compiler
int puts(const char *str)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    extern int _write(int file, char *ptr, int len);
    return _write(0, (char *)str, strlen(str));
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fb11 	bl	80001f0 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fefb 	bl	80009d0 <_write>
 8000bda:	4603      	mov	r3, r0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <printf>:

int printf(const char *format, ...)
{
 8000be4:	b40f      	push	{r0, r1, r2, r3}
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b0c2      	sub	sp, #264	; 0x108
 8000bea:	af00      	add	r7, sp, #0
    int ret;
    char str_buf[LOG_BUF_SIZE] = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f002 fcef 	bl	80035da <memset>

    va_list list;
    va_start(list, format);
 8000bfc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000c00:	463b      	mov	r3, r7
 8000c02:	601a      	str	r2, [r3, #0]
    ret = vsnprintf(str_buf, LOG_BUF_SIZE, format, list);
 8000c04:	463b      	mov	r3, r7
 8000c06:	1d38      	adds	r0, r7, #4
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c12:	f002 fd2b 	bl	800366c <vsniprintf>
 8000c16:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    va_end(list);

    ret = puts(str_buf);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ffcf 	bl	8000bc0 <puts>
 8000c22:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
    return ret;
 8000c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000c30:	46bd      	mov	sp, r7
 8000c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr

08000c3a <interrupt_disable>:

#include "kernel_inc/interrupt.h"

__attribute__((naked)) uint32_t interrupt_disable(void)
{
    __asm volatile("MRS R0, PRIMASK");
 8000c3a:	f3ef 8010 	mrs	r0, PRIMASK
    __asm volatile("CPSID I");
 8000c3e:	b672      	cpsid	i
    __asm volatile("BX LR");
 8000c40:	4770      	bx	lr
}
 8000c42:	bf00      	nop
 8000c44:	4618      	mov	r0, r3

08000c46 <interrupt_enable>:

__attribute__((naked)) void interrupt_enable(uint32_t prev_state)
{
    __asm volatile("MSR PRIMASK, R0");
 8000c46:	f380 8810 	msr	PRIMASK, r0
    __asm volatile("BX LR");
 8000c4a:	4770      	bx	lr
}
 8000c4c:	bf00      	nop

08000c4e <__list_add>:
 * none
 */
static inline void __list_add(struct list_head *new,
                              struct list_head *prev,
                              struct list_head *next)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b085      	sub	sp, #20
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
    new->next = next;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]
    next->prev = new;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	605a      	str	r2, [r3, #4]
    new->prev = prev;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	605a      	str	r2, [r3, #4]
    prev->next = new;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	601a      	str	r2, [r3, #0]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <list_add_between>:
 * none
 */
static inline void list_add_between(struct list_head *new,
                                    struct list_head *prev,
                                    struct list_head *next)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
    __list_add(new, prev, next);
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff ffdd 	bl	8000c4e <__list_add>
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <list_add_after>:
 * Output:
 * none
 */
static inline void list_add_after(struct list_head *new,
                                  struct list_head *head)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
    __list_add(new, head, head->next);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	6839      	ldr	r1, [r7, #0]
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffcd 	bl	8000c4e <__list_add>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <list_add_before>:
 * Output:
 * none
 */
static inline void list_add_before(struct list_head *new,
                                   struct list_head *head)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
    __list_add(new, head->prev, head);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ffbd 	bl	8000c4e <__list_add>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <__list_del>:
 * Output:
 * none
 */
static inline void __list_del(struct list_head *prev,
                              struct list_head *next)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
    prev->next = next;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	601a      	str	r2, [r3, #0]
    next->prev = prev;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	605a      	str	r2, [r3, #4]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <list_del>:
 * entry: the entry to be deleted
 * Output:
 * none
 */
static inline void list_del(struct list_head *entry)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
    __list_del(entry->prev, entry->next);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4610      	mov	r0, r2
 8000d12:	f7ff ffe3 	bl	8000cdc <__list_del>
    entry->next = NULL;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
    entry->prev = NULL;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <pend_list_add>:
 * Output:
 * none
 */
void pend_list_add(struct list_head *head,
                   p_tcb_t task_handler)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b088      	sub	sp, #32
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
    //first remove entry from schedule list
    list_del(&task_handler->list);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	3374      	adds	r3, #116	; 0x74
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ffe0 	bl	8000cfe <list_del>
    task_handler->state = TASK_PENDING;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2202      	movs	r2, #2
 8000d42:	771a      	strb	r2, [r3, #28]

    //then add entry to pending list
    if (list_empty(head)) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d106      	bne.n	8000d5c <pend_list_add+0x32>
        list_add_before(&task_handler->list, head);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3374      	adds	r3, #116	; 0x74
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ffb1 	bl	8000cbc <list_add_before>
                    break;
                }
            }
        }
    }
}
 8000d5a:	e04a      	b.n	8000df2 <pend_list_add+0xc8>
        list_for_each_entry_safe(itr, itr_next, head, list) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3b74      	subs	r3, #116	; 0x74
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	3b74      	subs	r3, #116	; 0x74
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	e037      	b.n	8000de6 <pend_list_add+0xbc>
            if (task_handler->prio <= itr->prio) {
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d806      	bhi.n	8000d94 <pend_list_add+0x6a>
                list_add_after(&task_handler->list, head);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	3374      	adds	r3, #116	; 0x74
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff85 	bl	8000c9c <list_add_after>
                break;
 8000d92:	e02e      	b.n	8000df2 <pend_list_add+0xc8>
                if (&itr_next->list != head) {   //@itr is not the last entry
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	3374      	adds	r3, #116	; 0x74
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d01c      	beq.n	8000dd8 <pend_list_add+0xae>
                    if (task_handler->prio < itr_next->prio) {
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d20b      	bcs.n	8000dc6 <pend_list_add+0x9c>
                        list_add_between(&task_handler->list, &itr->list, &itr_next->list);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f103 0174 	add.w	r1, r3, #116	; 0x74
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	3374      	adds	r3, #116	; 0x74
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f7ff ff5d 	bl	8000c7e <list_add_between>
                        break;
 8000dc4:	e015      	b.n	8000df2 <pend_list_add+0xc8>
        list_for_each_entry_safe(itr, itr_next, head, list) {
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	3b74      	subs	r3, #116	; 0x74
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	e006      	b.n	8000de6 <pend_list_add+0xbc>
                    list_add_before(&task_handler->list, head);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	3374      	adds	r3, #116	; 0x74
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff6c 	bl	8000cbc <list_add_before>
                    break;
 8000de4:	e005      	b.n	8000df2 <pend_list_add+0xc8>
        list_for_each_entry_safe(itr, itr_next, head, list) {
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3374      	adds	r3, #116	; 0x74
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d1c2      	bne.n	8000d76 <pend_list_add+0x4c>
}
 8000df0:	e7ff      	b.n	8000df2 <pend_list_add+0xc8>
 8000df2:	bf00      	nop
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <pend_list_del>:

void pend_list_del(p_tcb_t task_handler)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
    //first remove entry from pending list
    list_del(&task_handler->list);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3374      	adds	r3, #116	; 0x74
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff79 	bl	8000cfe <list_del>

    //then add entry to scheduler list
    task_handler->state = TASK_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	771a      	strb	r2, [r3, #28]
    insert_task_to_list(task_handler);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 fb28 	bl	8001468 <insert_task_to_list>
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <ipc_timer>:

    return ERR_OK;
}

void ipc_timer(void *parameter)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    //time is up, schedule current task anyway
    p_tcb_t cur_task = (p_tcb_t)parameter;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	60fb      	str	r3, [r7, #12]
    cur_task->error = ERR_TIMEOUT;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    pend_list_del(cur_task);
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f7ff ffe0 	bl	8000dfa <pend_list_del>

    //do schedule
    task_schedule();
 8000e3a:	f000 fd1b 	bl	8001874 <task_schedule>
}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <mutex_create>:
 * Output:
 * create result: 0 - ok
 *                1 - fail
 */
err_t mutex_create(p_mutex_t mutex_handler)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
    if (mutex_handler == NULL) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <mutex_create+0x12>
        return ERR_FAIL;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e016      	b.n	8000e86 <mutex_create+0x40>
    }

    mutex_handler->recursive_time = 0;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    mutex_handler->origin_prio = 0xff;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	22ff      	movs	r2, #255	; 0xff
 8000e62:	701a      	strb	r2, [r3, #0]
    mutex_handler->owner = NULL;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]

    mutex_handler->sem.value = 1;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	60da      	str	r2, [r3, #12]
    //initialize semaphore pending list
    mutex_handler->sem.pend_list.next = &mutex_handler->sem.pend_list;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f103 0210 	add.w	r2, r3, #16
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	611a      	str	r2, [r3, #16]
    mutex_handler->sem.pend_list.prev = &mutex_handler->sem.pend_list;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f103 0210 	add.w	r2, r3, #16
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	615a      	str	r2, [r3, #20]

    return ERR_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <mutex_take>:
 *              1 - fail
 *              2 - timeout
 */
err_t mutex_take(p_mutex_t mutex_handler,
                 uint32_t time)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
    if (mutex_handler == NULL) {
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <mutex_take+0x14>
        return ERR_FAIL;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e075      	b.n	8000f94 <mutex_take+0x100>
    }

    p_tcb_t cur_task = task_get_self();
 8000ea8:	f000 fe34 	bl	8001b14 <task_get_self>
 8000eac:	6178      	str	r0, [r7, #20]

    if (mutex_handler->sem.value == 1) {   //mutex is available
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d118      	bne.n	8000ee8 <mutex_take+0x54>
        uint32_t level = interrupt_disable();
 8000eb6:	f7ff fec0 	bl	8000c3a <interrupt_disable>
 8000eba:	60b8      	str	r0, [r7, #8]
        mutex_handler->sem.value--;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60da      	str	r2, [r3, #12]
        mutex_handler->owner = cur_task;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	605a      	str	r2, [r3, #4]
        mutex_handler->origin_prio = cur_task->prio;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	701a      	strb	r2, [r3, #0]
        mutex_handler->recursive_time++;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	609a      	str	r2, [r3, #8]
        interrupt_enable(level);
 8000ee0:	68b8      	ldr	r0, [r7, #8]
 8000ee2:	f7ff feb0 	bl	8000c46 <interrupt_enable>
 8000ee6:	e054      	b.n	8000f92 <mutex_take+0xfe>
    } else {   //mutex is not available
        if (cur_task == mutex_handler->owner) {   //recursive
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d105      	bne.n	8000efe <mutex_take+0x6a>
            mutex_handler->recursive_time++;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	e049      	b.n	8000f92 <mutex_take+0xfe>
        } else {   //other tasks
            if (time == WAIT_NONE) {   //no wait time, return error
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <mutex_take+0x74>
                return ERR_TIMEOUT;
 8000f04:	2302      	movs	r3, #2
 8000f06:	e045      	b.n	8000f94 <mutex_take+0x100>
            }

            //add to pending list
            pend_list_add(&mutex_handler->sem.pend_list, cur_task);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3310      	adds	r3, #16
 8000f0c:	6979      	ldr	r1, [r7, #20]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff0b 	bl	8000d2a <pend_list_add>
            cur_task->soft_timer.timeout_func = NULL;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2200      	movs	r2, #0
 8000f18:	64da      	str	r2, [r3, #76]	; 0x4c

            //prevent priority reverse
            p_tcb_t first_entry = list_entry(mutex_handler->sem.pend_list.next, typeof(tcb_t), list);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	3b74      	subs	r3, #116	; 0x74
 8000f24:	60fb      	str	r3, [r7, #12]
            if (mutex_handler->owner->prio > first_entry->prio) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d911      	bls.n	8000f5c <mutex_take+0xc8>
                list_del(&mutex_handler->owner->list);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	3374      	adds	r3, #116	; 0x74
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fedd 	bl	8000cfe <list_del>
                mutex_handler->owner->prio = first_entry->prio;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                insert_task_to_list(mutex_handler->owner);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fa86 	bl	8001468 <insert_task_to_list>
            }

            if (time != WAIT_FOREVER) {
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f62:	d010      	beq.n	8000f86 <mutex_take+0xf2>
                soft_timer_create(&cur_task->soft_timer,
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f103 003c 	add.w	r0, r3, #60	; 0x3c
                                  cur_task->name,
 8000f6a:	6979      	ldr	r1, [r7, #20]
                soft_timer_create(&cur_task->soft_timer,
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <mutex_take+0x108>)
 8000f78:	f000 f8f7 	bl	800116a <soft_timer_create>
                                  ipc_timer,
                                  cur_task,
                                  time,
                                  TYPE_ONESHOT);
                soft_timer_start(&cur_task->soft_timer);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	333c      	adds	r3, #60	; 0x3c
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f915 	bl	80011b0 <soft_timer_start>
            }

            //do schedule
            task_schedule();
 8000f86:	f000 fc75 	bl	8001874 <task_schedule>

            return cur_task->error;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8000f90:	e000      	b.n	8000f94 <mutex_take+0x100>
        }
    }
    return ERR_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	08000e21 	.word	0x08000e21

08000fa0 <mutex_release>:
 * Output:
 * result:        0 - ok
 *                1 - fail
 */
err_t mutex_release(p_mutex_t mutex_handler)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    if (mutex_handler == NULL) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <mutex_release+0x12>
        return ERR_FAIL;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e069      	b.n	8001086 <mutex_release+0xe6>
    }

    p_tcb_t cur_task = task_get_self();
 8000fb2:	f000 fdaf 	bl	8001b14 <task_get_self>
 8000fb6:	6178      	str	r0, [r7, #20]

    //only owner of mutex can release
    if (cur_task != mutex_handler->owner) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d001      	beq.n	8000fc6 <mutex_release+0x26>
        return ERR_FAIL;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e05f      	b.n	8001086 <mutex_release+0xe6>
    }

    mutex_handler->recursive_time--;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	609a      	str	r2, [r3, #8]

    if (mutex_handler->recursive_time == 0) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d155      	bne.n	8001084 <mutex_release+0xe4>
        if (!list_empty(&mutex_handler->sem.pend_list)) {   //pend list is not empty
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3310      	adds	r3, #16
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d03e      	beq.n	8001062 <mutex_release+0xc2>
            p_tcb_t pend_task = list_entry(mutex_handler->sem.pend_list.next, typeof(tcb_t), list);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3b74      	subs	r3, #116	; 0x74
 8000fee:	60bb      	str	r3, [r7, #8]

            //stop software timer
            if (pend_task->soft_timer.timeout_func != NULL) {
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d008      	beq.n	800100a <mutex_release+0x6a>
                soft_timer_stop(&pend_task->soft_timer);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	333c      	adds	r3, #60	; 0x3c
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f949 	bl	8001294 <soft_timer_stop>
                pend_task->error = ERR_OK;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }

            pend_list_del(pend_task);
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	f7ff fef5 	bl	8000dfa <pend_list_del>

            //reset previous owner priority to original
            if (mutex_handler->owner->prio != mutex_handler->origin_prio) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d010      	beq.n	8001042 <mutex_release+0xa2>
                list_del(&mutex_handler->owner->list);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	3374      	adds	r3, #116	; 0x74
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fe69 	bl	8000cfe <list_del>
                mutex_handler->owner->prio = mutex_handler->origin_prio;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	7812      	ldrb	r2, [r2, #0]
 8001034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                insert_task_to_list(mutex_handler->owner);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fa13 	bl	8001468 <insert_task_to_list>
            }

            //change owner of mutex
            mutex_handler->owner = pend_task;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	605a      	str	r2, [r3, #4]
            mutex_handler->origin_prio = pend_task->prio;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	701a      	strb	r2, [r3, #0]

            //when schedule to next task, pc reaches the end of @mutex_take(), so we have to add here
            mutex_handler->recursive_time++;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]

            //do schedule
            task_schedule();
 800105c:	f000 fc0a 	bl	8001874 <task_schedule>
 8001060:	e010      	b.n	8001084 <mutex_release+0xe4>
        } else {   //pend list empty
            uint32_t level = interrupt_disable();
 8001062:	f7ff fdea 	bl	8000c3a <interrupt_disable>
 8001066:	6138      	str	r0, [r7, #16]
            mutex_handler->sem.value++;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60da      	str	r2, [r3, #12]
            mutex_handler->origin_prio = 0xff;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	701a      	strb	r2, [r3, #0]
            mutex_handler->owner = NULL;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
            interrupt_enable(level);
 800107e:	6938      	ldr	r0, [r7, #16]
 8001080:	f7ff fde1 	bl	8000c46 <interrupt_enable>
        }
    }
    return ERR_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <__list_add>:
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
    new->next = next;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	601a      	str	r2, [r3, #0]
    next->prev = new;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	605a      	str	r2, [r3, #4]
    new->prev = prev;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	605a      	str	r2, [r3, #4]
    prev->next = new;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	601a      	str	r2, [r3, #0]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <list_add_between>:
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
    __list_add(new, prev, next);
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff ffdd 	bl	800108e <__list_add>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <list_add_after>:
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
    __list_add(new, head, head->next);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	6839      	ldr	r1, [r7, #0]
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffcd 	bl	800108e <__list_add>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <list_add_before>:
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    __list_add(new, head->prev, head);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffbd 	bl	800108e <__list_add>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <__list_del>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
    prev->next = next;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	601a      	str	r2, [r3, #0]
    next->prev = prev;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	605a      	str	r2, [r3, #4]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <list_del>:
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
    __list_del(entry->prev, entry->next);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	4610      	mov	r0, r2
 8001152:	f7ff ffe3 	bl	800111c <__list_del>
    entry->next = NULL;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
    entry->prev = NULL;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <soft_timer_create>:
                        const char *name,
                        void (*timeout_func) (void *parameter),
                        void *parameter,
                        uint32_t init_tick,
                        timer_type_t type)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	603b      	str	r3, [r7, #0]
    //initialize timer handler
    strncpy(timer_handler->name, name, NAME_MAX_LEN);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2210      	movs	r2, #16
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fa33 	bl	80035ea <strncpy>
    timer_handler->timeout_func = (void *)timeout_func;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	611a      	str	r2, [r3, #16]
    timer_handler->parameter = (void *)parameter;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	615a      	str	r2, [r3, #20]
    timer_handler->init_tick = init_tick;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	619a      	str	r2, [r3, #24]
    timer_handler->timeout_tick = init_tick;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	61da      	str	r2, [r3, #28]
    timer_handler->type = type;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	7f3a      	ldrb	r2, [r7, #28]
 80011a0:	f883 2020 	strb.w	r2, [r3, #32]

    return ERR_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <soft_timer_start>:
 * timer_handler: handler of timer
 * Output:
 * none
 */
void soft_timer_start(p_soft_timer_t timer_handler)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    if (list_empty(&g_timer_list_head)) {
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <soft_timer_start+0xe0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a34      	ldr	r2, [pc, #208]	; (8001290 <soft_timer_start+0xe0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d106      	bne.n	80011d0 <soft_timer_start+0x20>
        //the first entry, add to list directly
        list_add_before(&timer_handler->list, &g_timer_list_head);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3324      	adds	r3, #36	; 0x24
 80011c6:	4932      	ldr	r1, [pc, #200]	; (8001290 <soft_timer_start+0xe0>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff97 	bl	80010fc <list_add_before>
                    break;
                }
            }
        }
    }
}
 80011ce:	e05b      	b.n	8001288 <soft_timer_start+0xd8>
        list_for_each_entry_safe(itr, itr_next, &g_timer_list_head, list) {
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <soft_timer_start+0xe0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3b24      	subs	r3, #36	; 0x24
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	3b24      	subs	r3, #36	; 0x24
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	e048      	b.n	800127c <soft_timer_start+0xcc>
            if (timer_handler->timeout_tick <= itr->timeout_tick) {   //new timer will be the first
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d80d      	bhi.n	8001212 <soft_timer_start+0x62>
                itr->timeout_tick -= timer_handler->timeout_tick;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	69da      	ldr	r2, [r3, #28]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	1ad2      	subs	r2, r2, r3
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	61da      	str	r2, [r3, #28]
                list_add_after(&timer_handler->list, &g_timer_list_head);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3324      	adds	r3, #36	; 0x24
 8001208:	4921      	ldr	r1, [pc, #132]	; (8001290 <soft_timer_start+0xe0>)
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff66 	bl	80010dc <list_add_after>
                break;
 8001210:	e03a      	b.n	8001288 <soft_timer_start+0xd8>
                timer_handler->timeout_tick -= itr->timeout_tick;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69da      	ldr	r2, [r3, #28]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	1ad2      	subs	r2, r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	61da      	str	r2, [r3, #28]
                if (&itr_next->list != &g_timer_list_head) {  //@itr is not the last entry
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	3324      	adds	r3, #36	; 0x24
 8001224:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <soft_timer_start+0xe0>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d021      	beq.n	800126e <soft_timer_start+0xbe>
                    if (timer_handler->timeout_tick < itr_next->timeout_tick) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69da      	ldr	r2, [r3, #28]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	429a      	cmp	r2, r3
 8001234:	d212      	bcs.n	800125c <soft_timer_start+0xac>
                        itr_next->timeout_tick -= timer_handler->timeout_tick;
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	61da      	str	r2, [r3, #28]
                        list_add_between(&timer_handler->list, &itr->list, &itr_next->list);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3324      	adds	r3, #36	; 0x24
 8001254:	461a      	mov	r2, r3
 8001256:	f7ff ff32 	bl	80010be <list_add_between>
                        break;
 800125a:	e015      	b.n	8001288 <soft_timer_start+0xd8>
        list_for_each_entry_safe(itr, itr_next, &g_timer_list_head, list) {
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3b24      	subs	r3, #36	; 0x24
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	e006      	b.n	800127c <soft_timer_start+0xcc>
                    list_add_before(&timer_handler->list, &g_timer_list_head);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3324      	adds	r3, #36	; 0x24
 8001272:	4907      	ldr	r1, [pc, #28]	; (8001290 <soft_timer_start+0xe0>)
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff41 	bl	80010fc <list_add_before>
                    break;
 800127a:	e005      	b.n	8001288 <soft_timer_start+0xd8>
        list_for_each_entry_safe(itr, itr_next, &g_timer_list_head, list) {
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	3324      	adds	r3, #36	; 0x24
 8001280:	4a03      	ldr	r2, [pc, #12]	; (8001290 <soft_timer_start+0xe0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d1b1      	bne.n	80011ea <soft_timer_start+0x3a>
}
 8001286:	e7ff      	b.n	8001288 <soft_timer_start+0xd8>
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000004 	.word	0x20000004

08001294 <soft_timer_stop>:
 * timer_handler: handler of timer
 * Output:
 * none
 */
void soft_timer_stop(p_soft_timer_t timer_handler)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    //remove entry from list
    list_del(&timer_handler->list);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3324      	adds	r3, #36	; 0x24
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff4c 	bl	800113e <list_del>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <soft_timer_check>:
 * none
 * Output:
 * none
 */
void soft_timer_check(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
    if (!list_empty(&g_timer_list_head)) {
 80012b6:	4b18      	ldr	r3, [pc, #96]	; (8001318 <soft_timer_check+0x68>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <soft_timer_check+0x68>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d026      	beq.n	800130e <soft_timer_check+0x5e>
        p_soft_timer_t timer = NULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
        timer = list_entry((&g_timer_list_head)->next, typeof(soft_timer_t), list);
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <soft_timer_check+0x68>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	3b24      	subs	r3, #36	; 0x24
 80012ce:	607b      	str	r3, [r7, #4]
        if (timer->timeout_tick == 0) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d115      	bne.n	8001304 <soft_timer_check+0x54>
            //time is up
            ((void (*) (void *))timer->timeout_func)(timer->parameter);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	461a      	mov	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4618      	mov	r0, r3
 80012e4:	4790      	blx	r2
            soft_timer_stop(timer);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffd4 	bl	8001294 <soft_timer_stop>

            if (timer->type == TYPE_REPEAT) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d106      	bne.n	8001304 <soft_timer_check+0x54>
                //insert timer to timer list again
                timer->timeout_tick = timer->init_tick;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	61da      	str	r2, [r3, #28]
                soft_timer_start(timer);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff56 	bl	80011b0 <soft_timer_start>
            }
        }
        timer->timeout_tick--;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	1e5a      	subs	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	61da      	str	r2, [r3, #28]
    }
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000004 	.word	0x20000004

0800131c <PendSV_Handler>:
#include "kernel_inc/system_exception.h"

__attribute__((naked)) void PendSV_Handler(void)
{
    //1. save the context of current task
    __asm volatile("MRS R0, PSP");
 800131c:	f3ef 8009 	mrs	r0, PSP
    __asm volatile("STMDB R0!, {R4-R11}");
 8001320:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    //save lr before call other function
    __asm volatile("PUSH {LR}");
 8001324:	b500      	push	{lr}

    //2. save the current value of psp
    __asm volatile("BL save_current_psp");
 8001326:	f000 fa2d 	bl	8001784 <save_current_psp>

    //3. retrieve the context of next task
    __asm volatile("BL get_next_psp");
 800132a:	f000 fa13 	bl	8001754 <get_next_psp>

    __asm volatile("LDMIA R0!, {R4-R11}");
 800132e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    //update psp
    __asm volatile("MSR PSP,R0");
 8001332:	f380 8809 	msr	PSP, r0

    //update current task with next task and exit
    __asm volatile("BL update_cur_with_next");
 8001336:	f000 fa35 	bl	80017a4 <update_cur_with_next>
    __asm volatile("POP {LR}");
 800133a:	f85d eb04 	ldr.w	lr, [sp], #4
    __asm volatile("BX LR");
 800133e:	4770      	bx	lr
}
 8001340:	bf00      	nop

08001342 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
    //HAL_IncTick();
    soft_timer_check();
 8001346:	f7ff ffb3 	bl	80012b0 <soft_timer_check>

    update_task_state();
 800134a:	f000 fb3b 	bl	80019c4 <update_task_state>

    task_schedule();
 800134e:	f000 fa91 	bl	8001874 <task_schedule>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <__list_add>:
{
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
    new->next = next;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	601a      	str	r2, [r3, #0]
    next->prev = new;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	605a      	str	r2, [r3, #4]
    new->prev = prev;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	605a      	str	r2, [r3, #4]
    prev->next = new;
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <list_add_between>:
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
    __list_add(new, prev, next);
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff ffdd 	bl	8001356 <__list_add>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <list_add_after>:
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
    __list_add(new, head, head->next);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffcd 	bl	8001356 <__list_add>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <list_add_before>:
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
    __list_add(new, head->prev, head);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ffbd 	bl	8001356 <__list_add>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <__list_del>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    prev->next = next;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	601a      	str	r2, [r3, #0]
    next->prev = prev;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	605a      	str	r2, [r3, #4]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <list_del>:
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
    __list_del(entry->prev, entry->next);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	4610      	mov	r0, r2
 800141a:	f7ff ffe3 	bl	80013e4 <__list_del>
    entry->next = NULL;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
    entry->prev = NULL;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <create_prio_list_entry>:
static tcb_t g_idle_handle;

list_head_init(g_prio_list_head);

p_prio_list_t create_prio_list_entry(p_tcb_t task_handler)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
    p_prio_list_t prio_list = (p_prio_list_t)os_malloc(sizeof(prio_list_t));
 800143a:	2014      	movs	r0, #20
 800143c:	f7ff fb46 	bl	8000acc <os_malloc>
 8001440:	60f8      	str	r0, [r7, #12]

    prio_list->prio = task_handler->prio;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	701a      	strb	r2, [r3, #0]

    //initialize task list head
    prio_list->task_list_head.next = &prio_list->task_list_head;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	1d1a      	adds	r2, r3, #4
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	605a      	str	r2, [r3, #4]
    prio_list->task_list_head.prev = &prio_list->task_list_head;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1d1a      	adds	r2, r3, #4
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	609a      	str	r2, [r3, #8]

    return prio_list;
 800145c:	68fb      	ldr	r3, [r7, #12]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <insert_task_to_list>:
 * task_handler: handler of task
 * Output:
 * none
 */
void insert_task_to_list(p_tcb_t task_handler)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    if (list_empty(&g_prio_list_head)) {
 8001470:	4b52      	ldr	r3, [pc, #328]	; (80015bc <insert_task_to_list+0x154>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a51      	ldr	r2, [pc, #324]	; (80015bc <insert_task_to_list+0x154>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d115      	bne.n	80014a6 <insert_task_to_list+0x3e>
        p_prio_list_t prio_list = NULL;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
        prio_list = create_prio_list_entry(task_handler);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffd7 	bl	8001432 <create_prio_list_entry>
 8001484:	60f8      	str	r0, [r7, #12]

        list_add_before(&prio_list->list, &g_prio_list_head);               //deal priority list
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	330c      	adds	r3, #12
 800148a:	494c      	ldr	r1, [pc, #304]	; (80015bc <insert_task_to_list+0x154>)
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff99 	bl	80013c4 <list_add_before>
        list_add_before(&task_handler->list, &prio_list->task_list_head);   //deal task list of this priority
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	3304      	adds	r3, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff ff90 	bl	80013c4 <list_add_before>
                     break;
                 }
            }
        }
    }
}
 80014a4:	e086      	b.n	80015b4 <insert_task_to_list+0x14c>
        list_for_each_entry_safe(itr, itr_next, &g_prio_list_head, list) {
 80014a6:	4b45      	ldr	r3, [pc, #276]	; (80015bc <insert_task_to_list+0x154>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3b0c      	subs	r3, #12
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	623b      	str	r3, [r7, #32]
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	3b0c      	subs	r3, #12
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014be:	e073      	b.n	80015a8 <insert_task_to_list+0x140>
            if (task_handler->prio == itr->prio) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80014c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d109      	bne.n	80014e2 <insert_task_to_list+0x7a>
                list_add_before(&task_handler->list, &itr->task_list_head);   //deal task list of this priority
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0274 	add.w	r2, r3, #116	; 0x74
 80014d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d6:	3304      	adds	r3, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4610      	mov	r0, r2
 80014dc:	f7ff ff72 	bl	80013c4 <list_add_before>
                break;
 80014e0:	e068      	b.n	80015b4 <insert_task_to_list+0x14c>
            } else if (task_handler->prio < itr->prio) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d215      	bcs.n	800151c <insert_task_to_list+0xb4>
                p_prio_list_t prio_list = NULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
                prio_list = create_prio_list_entry(task_handler);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff9c 	bl	8001432 <create_prio_list_entry>
 80014fa:	6138      	str	r0, [r7, #16]
                list_add_after(&prio_list->list, &g_prio_list_head);                //deal priority list
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	330c      	adds	r3, #12
 8001500:	492e      	ldr	r1, [pc, #184]	; (80015bc <insert_task_to_list+0x154>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff4e 	bl	80013a4 <list_add_after>
                list_add_before(&task_handler->list, &prio_list->task_list_head);   //deal task list of this priority
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	3304      	adds	r3, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4610      	mov	r0, r2
 8001516:	f7ff ff55 	bl	80013c4 <list_add_before>
                break;
 800151a:	e04b      	b.n	80015b4 <insert_task_to_list+0x14c>
                if (&itr_next->list != &g_prio_list_head) {   //@itr is not the last entry of the list
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	330c      	adds	r3, #12
 8001520:	4a26      	ldr	r2, [pc, #152]	; (80015bc <insert_task_to_list+0x154>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d02a      	beq.n	800157c <insert_task_to_list+0x114>
                    if (task_handler->prio < itr_next->prio) {
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800152c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d21a      	bcs.n	800156a <insert_task_to_list+0x102>
                        p_prio_list_t prio_list = NULL;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
                        prio_list = create_prio_list_entry(task_handler);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff7a 	bl	8001432 <create_prio_list_entry>
 800153e:	6178      	str	r0, [r7, #20]
                        list_add_between(&prio_list->list, &itr->list, &itr_next->list);    //deal priority list
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f103 000c 	add.w	r0, r3, #12
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	f103 010c 	add.w	r1, r3, #12
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	330c      	adds	r3, #12
 8001550:	461a      	mov	r2, r3
 8001552:	f7ff ff18 	bl	8001386 <list_add_between>
                        list_add_before(&task_handler->list, &prio_list->task_list_head);   //deal task list of this priority
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3304      	adds	r3, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4610      	mov	r0, r2
 8001564:	f7ff ff2e 	bl	80013c4 <list_add_before>
                        break;
 8001568:	e024      	b.n	80015b4 <insert_task_to_list+0x14c>
        list_for_each_entry_safe(itr, itr_next, &g_prio_list_head, list) {
 800156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	3b0c      	subs	r3, #12
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
 800157a:	e015      	b.n	80015a8 <insert_task_to_list+0x140>
                     p_prio_list_t prio_list = NULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
                     prio_list = create_prio_list_entry(task_handler);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff56 	bl	8001432 <create_prio_list_entry>
 8001586:	61f8      	str	r0, [r7, #28]
                     list_add_before(&prio_list->list, &g_prio_list_head);             //deal priority list
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	330c      	adds	r3, #12
 800158c:	490b      	ldr	r1, [pc, #44]	; (80015bc <insert_task_to_list+0x154>)
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff18 	bl	80013c4 <list_add_before>
                     list_add_before(&task_handler->list, &prio_list->task_list_head); //deal task list of this priority
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4610      	mov	r0, r2
 80015a2:	f7ff ff0f 	bl	80013c4 <list_add_before>
                     break;
 80015a6:	e005      	b.n	80015b4 <insert_task_to_list+0x14c>
        list_for_each_entry_safe(itr, itr_next, &g_prio_list_head, list) {
 80015a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015aa:	330c      	adds	r3, #12
 80015ac:	4a03      	ldr	r2, [pc, #12]	; (80015bc <insert_task_to_list+0x154>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d186      	bne.n	80014c0 <insert_task_to_list+0x58>
}
 80015b2:	e7ff      	b.n	80015b4 <insert_task_to_list+0x14c>
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	; 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000000c 	.word	0x2000000c

080015c0 <task_create_static>:
                         void *parameter,
                         uint8_t prio,
                         void *stack_addr,
                         uint32_t stack_size,
                         uint32_t init_tick)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
    //initialize tcb
    strncpy(task_handler->name, name, NAME_MAX_LEN);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2210      	movs	r2, #16
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f002 f808 	bl	80035ea <strncpy>
    task_handler->entry = (void *)entry;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	615a      	str	r2, [r3, #20]
    task_handler->parameter = parameter;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	619a      	str	r2, [r3, #24]
    task_handler->prio = prio;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    task_handler->stack_addr = stack_addr;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f4:	621a      	str	r2, [r3, #32]
    task_handler->stack_size = stack_size;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
    task_handler->init_tick = init_tick;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001600:	631a      	str	r2, [r3, #48]	; 0x30
    task_handler->init_tick_left = init_tick;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
    task_handler->state = TASK_READY;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	771a      	strb	r2, [r3, #28]
    task_handler->event = 0;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	66da      	str	r2, [r3, #108]	; 0x6c
    task_handler->error = ERR_OK;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    uint32_t level = interrupt_disable();
 800161c:	f7ff fb0d 	bl	8000c3a <interrupt_disable>
 8001620:	6138      	str	r0, [r7, #16]
    insert_task_to_list(task_handler);
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff ff20 	bl	8001468 <insert_task_to_list>
    interrupt_enable(level);
 8001628:	6938      	ldr	r0, [r7, #16]
 800162a:	f7ff fb0c 	bl	8000c46 <interrupt_enable>

    task_handler->sp = (uint32_t *)((uint32_t)stack_addr + stack_size);
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	4413      	add	r3, r2
 8001634:	461a      	mov	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	611a      	str	r2, [r3, #16]

    //initialize task stack, which is organized in Full Descending manner in cortex m3/m4
    //xpsr
    (task_handler->sp)--;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	1f1a      	subs	r2, r3, #4
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	611a      	str	r2, [r3, #16]
    *(task_handler->sp) = 0x01000000;//T bit always equals 1
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800164c:	601a      	str	r2, [r3, #0]

    //pc
    (task_handler->sp)--;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	1f1a      	subs	r2, r3, #4
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	611a      	str	r2, [r3, #16]
    *(task_handler->sp) = (uint32_t)task_handler->entry;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	601a      	str	r2, [r3, #0]

    //lr
    (task_handler->sp)--;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	1f1a      	subs	r2, r3, #4
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	611a      	str	r2, [r3, #16]
    *(task_handler->sp) = 0xFFFFFFFD;//return to thread mode using psp, so that another task can be schedule
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f06f 0202 	mvn.w	r2, #2
 8001674:	601a      	str	r2, [r3, #0]

    //r12, r3 ~ r0, r11 ~ r4
    int i;
    for (i = 0; i < 13; i++) {
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e013      	b.n	80016a4 <task_create_static+0xe4>
        (task_handler->sp)--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	1f1a      	subs	r2, r3, #4
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	611a      	str	r2, [r3, #16]
        if (i == 4) {
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d104      	bne.n	8001696 <task_create_static+0xd6>
            //put parameter into r0
            *(task_handler->sp) = (uint32_t)parameter;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e003      	b.n	800169e <task_create_static+0xde>
        } else {
            *(task_handler->sp) = 0;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < 13; i++) {
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	dde8      	ble.n	800167c <task_create_static+0xbc>
        }

    }

    return ERR_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <task_create>:
                  void (*entry) (void *parameter),
                  void *parameter,
                  uint8_t prio,
                  uint32_t stack_size,
                  uint32_t init_tick)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
    void *stack_addr = (void *)os_malloc(stack_size);
 80016c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016c4:	f7ff fa02 	bl	8000acc <os_malloc>
 80016c8:	6178      	str	r0, [r7, #20]
    if (stack_addr == NULL) {
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <task_create+0x20>
        return ERR_FAIL;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e00f      	b.n	80016f4 <task_create+0x40>
    }
    return task_create_static(task_handler,
 80016d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d6:	9303      	str	r3, [sp, #12]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff ff67 	bl	80015c0 <task_create_static>
 80016f2:	4603      	mov	r3, r0
                              parameter,
                              prio,
                              stack_addr,
                              stack_size,
                              init_tick);
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <idle_entry>:

void idle_entry(void *para)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
    while (1);
 8001704:	e7fe      	b.n	8001704 <idle_entry+0x8>
	...

08001708 <idle_task_create>:
 * none
 * Output:
 * none
 */
err_t idle_task_create(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af04      	add	r7, sp, #16
    void *idle_stack = (void *)os_malloc(IDLE_STACK_SIZE);
 800170e:	20c8      	movs	r0, #200	; 0xc8
 8001710:	f7ff f9dc 	bl	8000acc <os_malloc>
 8001714:	6078      	str	r0, [r7, #4]
    g_cur_task = &g_idle_handle;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <idle_task_create+0x3c>)
 8001718:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <idle_task_create+0x40>)
 800171a:	601a      	str	r2, [r3, #0]
    return task_create_static(&g_idle_handle,
 800171c:	2301      	movs	r3, #1
 800171e:	9303      	str	r3, [sp, #12]
 8001720:	23c8      	movs	r3, #200	; 0xc8
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	23ff      	movs	r3, #255	; 0xff
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <idle_task_create+0x44>)
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <idle_task_create+0x48>)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <idle_task_create+0x40>)
 8001734:	f7ff ff44 	bl	80015c0 <task_create_static>
 8001738:	4603      	mov	r3, r0
                              NULL,
                              255,
                              idle_stack,
                              IDLE_STACK_SIZE,
                              1);
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000ac 	.word	0x200000ac
 8001748:	200000b4 	.word	0x200000b4
 800174c:	080016fd 	.word	0x080016fd
 8001750:	08003f34 	.word	0x08003f34

08001754 <get_next_psp>:
 * none
 * Output:
 * next psp
 */
uint32_t *get_next_psp(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
    return g_next_task->sp;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <get_next_psp+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	200000b0 	.word	0x200000b0

0800176c <get_current_psp>:
 * none
 * Output:
 * next psp
 */
uint32_t *get_current_psp(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
    return g_cur_task->sp;
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <get_current_psp+0x14>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	200000ac 	.word	0x200000ac

08001784 <save_current_psp>:
 * sp: current psp
 * Output:
 * none
 */
void save_current_psp(uint32_t *sp)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    g_cur_task->sp = sp;
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <save_current_psp+0x1c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	611a      	str	r2, [r3, #16]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	200000ac 	.word	0x200000ac

080017a4 <update_cur_with_next>:
 * none
 * Output:
 * none
 */
void update_cur_with_next(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
    g_cur_task = g_next_task;
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <update_cur_with_next+0x18>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <update_cur_with_next+0x1c>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200000b0 	.word	0x200000b0
 80017c0:	200000ac 	.word	0x200000ac

080017c4 <get_next_task>:
 * none
 * Output:
 * none
 */
void get_next_task(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
    //for now no priority is implemented
    p_prio_list_t prio_itr = NULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]

    list_for_each_entry(prio_itr, &g_prio_list_head, list) {
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <get_next_task+0xa4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3b0c      	subs	r3, #12
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e039      	b.n	8001850 <get_next_task+0x8c>
        //find the first non-pending task to schedule
        p_tcb_t itr = NULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
        list_for_each_entry(itr, &prio_itr->task_list_head, list) {
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3b74      	subs	r3, #116	; 0x74
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e023      	b.n	8001836 <get_next_task+0x72>
            if (itr->state != TASK_PENDING) {
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	7f1b      	ldrb	r3, [r3, #28]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d019      	beq.n	800182a <get_next_task+0x66>
                if (itr != g_cur_task) {
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <get_next_task+0xa8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d00f      	beq.n	8001820 <get_next_task+0x5c>
                    itr->state = TASK_RUNNING;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2201      	movs	r2, #1
 8001804:	771a      	strb	r2, [r3, #28]
                    g_next_task = itr;
 8001806:	4a1a      	ldr	r2, [pc, #104]	; (8001870 <get_next_task+0xac>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	6013      	str	r3, [r2, #0]
                    if (g_cur_task->state == TASK_RUNNING) {   //current task is preempted
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <get_next_task+0xa8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	7f1b      	ldrb	r3, [r3, #28]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d122      	bne.n	800185c <get_next_task+0x98>
                        g_cur_task->state = TASK_READY;
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <get_next_task+0xa8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	771a      	strb	r2, [r3, #28]
                    }
                } else {
                    g_next_task = g_cur_task;
                }

                return;
 800181e:	e01d      	b.n	800185c <get_next_task+0x98>
                    g_next_task = g_cur_task;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <get_next_task+0xa8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <get_next_task+0xac>)
 8001826:	6013      	str	r3, [r2, #0]
                return;
 8001828:	e018      	b.n	800185c <get_next_task+0x98>
        list_for_each_entry(itr, &prio_itr->task_list_head, list) {
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3b74      	subs	r3, #116	; 0x74
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3304      	adds	r3, #4
 8001840:	429a      	cmp	r2, r3
 8001842:	d1d4      	bne.n	80017ee <get_next_task+0x2a>
    list_for_each_entry(prio_itr, &g_prio_list_head, list) {
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3b0c      	subs	r3, #12
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	330c      	adds	r3, #12
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <get_next_task+0xa4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d1c0      	bne.n	80017dc <get_next_task+0x18>
 800185a:	e000      	b.n	800185e <get_next_task+0x9a>
                return;
 800185c:	bf00      	nop
            }
        }

    }
}
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	2000000c 	.word	0x2000000c
 800186c:	200000ac 	.word	0x200000ac
 8001870:	200000b0 	.word	0x200000b0

08001874 <task_schedule>:
 * none
 * Output:
 * none
 */
void task_schedule(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
    uint32_t level = interrupt_disable();
 800187a:	f7ff f9de 	bl	8000c3a <interrupt_disable>
 800187e:	6078      	str	r0, [r7, #4]
    get_next_task();
 8001880:	f7ff ffa0 	bl	80017c4 <get_next_task>
    interrupt_enable(level);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff f9de 	bl	8000c46 <interrupt_enable>

    if (g_next_task != g_cur_task) {
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <task_schedule+0x3c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <task_schedule+0x40>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d007      	beq.n	80018a6 <task_schedule+0x32>
        //pend the pendSV exception
        uint32_t *pICSR = (uint32_t *)0xE000ED04; //address of ICSR
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <task_schedule+0x44>)
 8001898:	603b      	str	r3, [r7, #0]
        *pICSR |= (1 << 28); //set the 28th bit, which is PENDSVSET
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
    }

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200000b0 	.word	0x200000b0
 80018b4:	200000ac 	.word	0x200000ac
 80018b8:	e000ed04 	.word	0xe000ed04

080018bc <task_delay>:
 * tick: tick count to delay
 * Output:
 * none
 */
void task_delay(uint32_t tick)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    g_cur_task->delay_tick = tick;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <task_delay+0x2c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
    g_cur_task->delay_tick_left = tick;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <task_delay+0x2c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
    g_cur_task->state = TASK_PENDING;
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <task_delay+0x2c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2202      	movs	r2, #2
 80018da:	771a      	strb	r2, [r3, #28]
    task_schedule();
 80018dc:	f7ff ffca 	bl	8001874 <task_schedule>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200000ac 	.word	0x200000ac

080018ec <show_task_info>:
 * task_handler: task control block of task
 * Output:
 * none
 */
void show_task_info(p_tcb_t task_handler)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    char str[10] = {0};
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	811a      	strh	r2, [r3, #8]
    if (task_handler->state == TASK_READY) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7f1b      	ldrb	r3, [r3, #28]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d108      	bne.n	800191a <show_task_info+0x2e>
        strcpy(str, "ready");
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <show_task_info+0xb4>)
 800190e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001912:	6018      	str	r0, [r3, #0]
 8001914:	3304      	adds	r3, #4
 8001916:	8019      	strh	r1, [r3, #0]
 8001918:	e01d      	b.n	8001956 <show_task_info+0x6a>
    } else if (task_handler->state == TASK_PENDING) {
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7f1b      	ldrb	r3, [r3, #28]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d107      	bne.n	8001932 <show_task_info+0x46>
        strcpy(str, "pending");
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <show_task_info+0xb8>)
 8001928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800192c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001930:	e011      	b.n	8001956 <show_task_info+0x6a>
    } else if (task_handler->state == TASK_RUNNING) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7f1b      	ldrb	r3, [r3, #28]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <show_task_info+0x5e>
        strcpy(str, "running");
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <show_task_info+0xbc>)
 8001940:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001944:	e883 0003 	stmia.w	r3, {r0, r1}
 8001948:	e005      	b.n	8001956 <show_task_info+0x6a>
    } else {
        strcpy(str, "undefined");
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <show_task_info+0xc0>)
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	ca07      	ldmia	r2, {r0, r1, r2}
 8001952:	c303      	stmia	r3!, {r0, r1}
 8001954:	801a      	strh	r2, [r3, #0]
    }
    printf("task info:\r\n");
 8001956:	4816      	ldr	r0, [pc, #88]	; (80019b0 <show_task_info+0xc4>)
 8001958:	f7ff f932 	bl	8000bc0 <puts>
    printf("task name: %-20s\r\n", task_handler->name);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4619      	mov	r1, r3
 8001960:	4814      	ldr	r0, [pc, #80]	; (80019b4 <show_task_info+0xc8>)
 8001962:	f7ff f93f 	bl	8000be4 <printf>
    printf("task entry addr: %10p | task parameter addr: %10p\r\n", task_handler->entry, task_handler->parameter);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6959      	ldr	r1, [r3, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	461a      	mov	r2, r3
 8001970:	4811      	ldr	r0, [pc, #68]	; (80019b8 <show_task_info+0xcc>)
 8001972:	f7ff f937 	bl	8000be4 <printf>
    printf("task stack addr: %10p | task stack size: %14lu\r\n", task_handler->stack_addr, task_handler->stack_size);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a19      	ldr	r1, [r3, #32]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	461a      	mov	r2, r3
 8001980:	480e      	ldr	r0, [pc, #56]	; (80019bc <show_task_info+0xd0>)
 8001982:	f7ff f92f 	bl	8000be4 <printf>
    printf("task state: %15s | task psp: %21p\r\n", str, task_handler->sp);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <show_task_info+0xd4>)
 8001992:	f7ff f927 	bl	8000be4 <printf>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	08003f40 	.word	0x08003f40
 80019a4:	08003f48 	.word	0x08003f48
 80019a8:	08003f50 	.word	0x08003f50
 80019ac:	08003f58 	.word	0x08003f58
 80019b0:	08003f64 	.word	0x08003f64
 80019b4:	08003f70 	.word	0x08003f70
 80019b8:	08003f84 	.word	0x08003f84
 80019bc:	08003fb8 	.word	0x08003fb8
 80019c0:	08003fec 	.word	0x08003fec

080019c4 <update_task_state>:
 * none
 * Output:
 * none
 */
void update_task_state(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
    p_prio_list_t prio_itr = NULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
    list_for_each_entry(prio_itr, &g_prio_list_head, list) {
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <update_task_state+0x100>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3b0c      	subs	r3, #12
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e06a      	b.n	8001ab2 <update_task_state+0xee>
        p_tcb_t itr = NULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
        p_tcb_t t_itr = NULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

        list_for_each_entry_safe(itr, t_itr, &prio_itr->task_list_head, list) {
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3b74      	subs	r3, #116	; 0x74
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	3b74      	subs	r3, #116	; 0x74
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e04c      	b.n	8001a98 <update_task_state+0xd4>
            if (itr->state == TASK_RUNNING) {
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	7f1b      	ldrb	r3, [r3, #28]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d11e      	bne.n	8001a44 <update_task_state+0x80>
                itr->init_tick_left--;
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	635a      	str	r2, [r3, #52]	; 0x34

                if (itr->init_tick_left == 0) {
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d134      	bne.n	8001a82 <update_task_state+0xbe>
                    //time silce use up, reset time slice, remove to the end of list and ready to be scheduled
                    itr->init_tick_left = itr->init_tick;
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	635a      	str	r2, [r3, #52]	; 0x34
                    itr->state = TASK_READY;
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2200      	movs	r2, #0
 8001a24:	771a      	strb	r2, [r3, #28]
                    list_del(&itr->list);
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	3374      	adds	r3, #116	; 0x74
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fceb 	bl	8001406 <list_del>
                    list_add_before(&itr->list, &prio_itr->task_list_head);
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	f7ff fcc1 	bl	80013c4 <list_add_before>
                }
                continue;
 8001a42:	e01e      	b.n	8001a82 <update_task_state+0xbe>
            }

            if (itr->state == TASK_PENDING) {
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	7f1b      	ldrb	r3, [r3, #28]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d11d      	bne.n	8001a88 <update_task_state+0xc4>
                itr->delay_tick_left--;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	1e5a      	subs	r2, r3, #1
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c

                if (itr->delay_tick_left == 0) {
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d113      	bne.n	8001a86 <update_task_state+0xc2>
                    //set the task ready to be scheduled, @delay_tick_left will be updated in task_delay().
                    itr->state = TASK_READY;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2200      	movs	r2, #0
 8001a62:	771a      	strb	r2, [r3, #28]
                    list_del(&itr->list);
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	3374      	adds	r3, #116	; 0x74
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fccc 	bl	8001406 <list_del>
                    list_add_before(&itr->list, &prio_itr->task_list_head);
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3304      	adds	r3, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f7ff fca2 	bl	80013c4 <list_add_before>
                }
                continue;
 8001a80:	e001      	b.n	8001a86 <update_task_state+0xc2>
                continue;
 8001a82:	bf00      	nop
 8001a84:	e000      	b.n	8001a88 <update_task_state+0xc4>
                continue;
 8001a86:	bf00      	nop
        list_for_each_entry_safe(itr, t_itr, &prio_itr->task_list_head, list) {
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3b74      	subs	r3, #116	; 0x74
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f103 0274 	add.w	r2, r3, #116	; 0x74
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d1ab      	bne.n	80019fe <update_task_state+0x3a>
    list_for_each_entry(prio_itr, &g_prio_list_head, list) {
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b0c      	subs	r3, #12
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <update_task_state+0x100>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d18f      	bne.n	80019dc <update_task_state+0x18>
            }
        }
    }
}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000000c 	.word	0x2000000c

08001ac8 <switch_msp_to_psp>:

__attribute__((naked)) void switch_msp_to_psp(void)
{
    //initialize psp
    __asm volatile("PUSH {LR}");
 8001ac8:	b500      	push	{lr}
    __asm volatile("BL get_current_psp");
 8001aca:	f7ff fe4f 	bl	800176c <get_current_psp>
    __asm volatile("MSR PSP, R0");
 8001ace:	f380 8809 	msr	PSP, r0
    __asm volatile("POP {LR}");
 8001ad2:	f85d eb04 	ldr.w	lr, [sp], #4

    //switch from msp to psp
    __asm volatile("MOV R0, 0X02");
 8001ad6:	f04f 0002 	mov.w	r0, #2
    __asm volatile("MSR CONTROL, R0"); //write CONTROL register, SPSEL = 1
 8001ada:	f380 8814 	msr	CONTROL, r0
    __asm volatile("BX LR");
 8001ade:	4770      	bx	lr
}
 8001ae0:	bf00      	nop
	...

08001ae4 <os_start_schedule>:
 * none
 * Output:
 * none
 */
void os_start_schedule(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    //initialize
    idle_task_create();
 8001ae8:	f7ff fe0e 	bl	8001708 <idle_task_create>

    switch_msp_to_psp();
 8001aec:	f7ff ffec 	bl	8001ac8 <switch_msp_to_psp>

    //schedule
    g_cur_task->state = TASK_RUNNING;
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <os_start_schedule+0x2c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2201      	movs	r2, #1
 8001af6:	771a      	strb	r2, [r3, #28]
    ((void (*) (void *))g_cur_task->entry)(g_cur_task->parameter);
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <os_start_schedule+0x2c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <os_start_schedule+0x2c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	4618      	mov	r0, r3
 8001b08:	4790      	blx	r2
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200000ac 	.word	0x200000ac

08001b14 <task_get_self>:
 * none
 * Output:
 * current task handler
 */
p_tcb_t task_get_self(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
    return g_cur_task;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <task_get_self+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200000ac 	.word	0x200000ac

08001b2c <task_entry>:
static int t1 = 1;
static int t2 = 2;
static int t3 = 3;

void task_entry(void *para)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
    int num = *(int *)para;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
    while (1) {
        printf("this is task %d\r\n", num);
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	4808      	ldr	r0, [pc, #32]	; (8001b60 <task_entry+0x34>)
 8001b3e:	f7ff f851 	bl	8000be4 <printf>
        show_task_info(task_get_self());
 8001b42:	f7ff ffe7 	bl	8001b14 <task_get_self>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fecf 	bl	80018ec <show_task_info>
        task_delay(num * 1000);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff feaf 	bl	80018bc <task_delay>
        printf("this is task %d\r\n", num);
 8001b5e:	e7ec      	b.n	8001b3a <task_entry+0xe>
 8001b60:	08004010 	.word	0x08004010

08001b64 <task_sample_entry>:
        }
    }
}

void task_sample_entry(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af04      	add	r7, sp, #16
    if (heap_init() != ERR_OK) {
 8001b6a:	f7fe ff47 	bl	80009fc <heap_init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <task_sample_entry+0x18>
        printf("heap init failed!\r\n");
 8001b74:	481f      	ldr	r0, [pc, #124]	; (8001bf4 <task_sample_entry+0x90>)
 8001b76:	f7ff f823 	bl	8000bc0 <puts>
        return;
 8001b7a:	e037      	b.n	8001bec <task_sample_entry+0x88>
    }

    p_tcb_t task1_handler = (p_tcb_t)os_malloc(sizeof(tcb_t));
 8001b7c:	207c      	movs	r0, #124	; 0x7c
 8001b7e:	f7fe ffa5 	bl	8000acc <os_malloc>
 8001b82:	60f8      	str	r0, [r7, #12]
    p_tcb_t task2_handler = (p_tcb_t)os_malloc(sizeof(tcb_t));
 8001b84:	207c      	movs	r0, #124	; 0x7c
 8001b86:	f7fe ffa1 	bl	8000acc <os_malloc>
 8001b8a:	60b8      	str	r0, [r7, #8]
    p_tcb_t task3_handler = (p_tcb_t)os_malloc(sizeof(tcb_t));
 8001b8c:	207c      	movs	r0, #124	; 0x7c
 8001b8e:	f7fe ff9d 	bl	8000acc <os_malloc>
 8001b92:	6078      	str	r0, [r7, #4]

    task_create(task1_handler, "task1", task_entry, &t1, 1, 0x300, 0xffffffff);
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b98:	9302      	str	r3, [sp, #8]
 8001b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <task_sample_entry+0x94>)
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <task_sample_entry+0x98>)
 8001ba8:	4915      	ldr	r1, [pc, #84]	; (8001c00 <task_sample_entry+0x9c>)
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7ff fd82 	bl	80016b4 <task_create>
    task_create(task2_handler, "task2", task_entry, &t2, 2, 0x300, 0xffffffff);
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb4:	9302      	str	r3, [sp, #8]
 8001bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <task_sample_entry+0xa0>)
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <task_sample_entry+0x98>)
 8001bc4:	4910      	ldr	r1, [pc, #64]	; (8001c08 <task_sample_entry+0xa4>)
 8001bc6:	68b8      	ldr	r0, [r7, #8]
 8001bc8:	f7ff fd74 	bl	80016b4 <task_create>
    task_create(task3_handler, "task3", task_entry, &t3, 3, 0x300, 0xffffffff);
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2303      	movs	r3, #3
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <task_sample_entry+0xa8>)
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <task_sample_entry+0x98>)
 8001be0:	490b      	ldr	r1, [pc, #44]	; (8001c10 <task_sample_entry+0xac>)
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fd66 	bl	80016b4 <task_create>

    os_start_schedule();
 8001be8:	f7ff ff7c 	bl	8001ae4 <os_start_schedule>
}
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	08004034 	.word	0x08004034
 8001bf8:	20000014 	.word	0x20000014
 8001bfc:	08001b2d 	.word	0x08001b2d
 8001c00:	08004048 	.word	0x08004048
 8001c04:	20000018 	.word	0x20000018
 8001c08:	08004050 	.word	0x08004050
 8001c0c:	2000001c 	.word	0x2000001c
 8001c10:	08004058 	.word	0x08004058

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c1a:	e003      	b.n	8001c24 <LoopCopyDataInit>

08001c1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c22:	3104      	adds	r1, #4

08001c24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c2c:	d3f6      	bcc.n	8001c1c <CopyDataInit>
  ldr  r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c30:	e002      	b.n	8001c38 <LoopFillZerobss>

08001c32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c34:	f842 3b04 	str.w	r3, [r2], #4

08001c38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c3c:	d3f9      	bcc.n	8001c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c3e:	f7fe fe3f 	bl	80008c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f001 fc9b 	bl	800357c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7fe fd25 	bl	8000694 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c4c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001c50:	080040bc 	.word	0x080040bc
  ldr  r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c58:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8001c5c:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8001c60:	200001a0 	.word	0x200001a0

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	; (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f917 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f000 f808 	bl	8001cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7fe fd8c 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_InitTick+0x54>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x58>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f92f 	bl	8001f2e <HAL_SYSTICK_Config>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d80a      	bhi.n	8001cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ce8:	f000 f8f7 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_InitTick+0x5c>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000024 	.word	0x20000024
 8001d08:	20000020 	.word	0x20000020

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000198 	.word	0x20000198

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff29 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff3e 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff8e 	bl	8001e18 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5d 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff31 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e177      	b.n	8002254 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8166 	bne.w	800224e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d00b      	beq.n	8001fa2 <HAL_GPIO_Init+0x5a>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d007      	beq.n	8001fa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b12      	cmp	r3, #18
 8001fa0:	d130      	bne.n	8002004 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	2203      	movs	r2, #3
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 0201 	and.w	r2, r3, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0xfc>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b12      	cmp	r3, #18
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80c0 	beq.w	800224e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_GPIO_Init+0x320>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a64      	ldr	r2, [pc, #400]	; (8002268 <HAL_GPIO_Init+0x320>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b62      	ldr	r3, [pc, #392]	; (8002268 <HAL_GPIO_Init+0x320>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a60      	ldr	r2, [pc, #384]	; (800226c <HAL_GPIO_Init+0x324>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a57      	ldr	r2, [pc, #348]	; (8002270 <HAL_GPIO_Init+0x328>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d037      	beq.n	8002186 <HAL_GPIO_Init+0x23e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a56      	ldr	r2, [pc, #344]	; (8002274 <HAL_GPIO_Init+0x32c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_GPIO_Init+0x23a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a55      	ldr	r2, [pc, #340]	; (8002278 <HAL_GPIO_Init+0x330>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d02b      	beq.n	800217e <HAL_GPIO_Init+0x236>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a54      	ldr	r2, [pc, #336]	; (800227c <HAL_GPIO_Init+0x334>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d025      	beq.n	800217a <HAL_GPIO_Init+0x232>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a53      	ldr	r2, [pc, #332]	; (8002280 <HAL_GPIO_Init+0x338>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01f      	beq.n	8002176 <HAL_GPIO_Init+0x22e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <HAL_GPIO_Init+0x33c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d019      	beq.n	8002172 <HAL_GPIO_Init+0x22a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a51      	ldr	r2, [pc, #324]	; (8002288 <HAL_GPIO_Init+0x340>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0x226>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a50      	ldr	r2, [pc, #320]	; (800228c <HAL_GPIO_Init+0x344>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00d      	beq.n	800216a <HAL_GPIO_Init+0x222>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4f      	ldr	r2, [pc, #316]	; (8002290 <HAL_GPIO_Init+0x348>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <HAL_GPIO_Init+0x21e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_GPIO_Init+0x34c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_GPIO_Init+0x21a>
 800215e:	2309      	movs	r3, #9
 8002160:	e012      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002162:	230a      	movs	r3, #10
 8002164:	e010      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002166:	2308      	movs	r3, #8
 8002168:	e00e      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800216a:	2307      	movs	r3, #7
 800216c:	e00c      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800216e:	2306      	movs	r3, #6
 8002170:	e00a      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002172:	2305      	movs	r3, #5
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002176:	2304      	movs	r3, #4
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002186:	2300      	movs	r3, #0
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002198:	4934      	ldr	r1, [pc, #208]	; (800226c <HAL_GPIO_Init+0x324>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a6:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <HAL_GPIO_Init+0x350>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ca:	4a33      	ldr	r2, [pc, #204]	; (8002298 <HAL_GPIO_Init+0x350>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_GPIO_Init+0x350>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021f4:	4a28      	ldr	r2, [pc, #160]	; (8002298 <HAL_GPIO_Init+0x350>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fa:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_GPIO_Init+0x350>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221e:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <HAL_GPIO_Init+0x350>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_GPIO_Init+0x350>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002248:	4a13      	ldr	r2, [pc, #76]	; (8002298 <HAL_GPIO_Init+0x350>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f67f ae84 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800225c:	bf00      	nop
 800225e:	3724      	adds	r7, #36	; 0x24
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40023800 	.word	0x40023800
 800226c:	40013800 	.word	0x40013800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020800 	.word	0x40020800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40021000 	.word	0x40021000
 8002284:	40021400 	.word	0x40021400
 8002288:	40021800 	.word	0x40021800
 800228c:	40021c00 	.word	0x40021c00
 8002290:	40022000 	.word	0x40022000
 8002294:	40022400 	.word	0x40022400
 8002298:	40013c00 	.word	0x40013c00

0800229c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
 80022a8:	4613      	mov	r3, r2
 80022aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ac:	787b      	ldrb	r3, [r7, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b8:	e003      	b.n	80022c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	041a      	lsls	r2, r3, #16
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	619a      	str	r2, [r3, #24]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022e6:	4a05      	ldr	r2, [pc, #20]	; (80022fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f9c2 	bl	8000678 <HAL_GPIO_EXTI_Callback>
  }
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40013c00 	.word	0x40013c00

08002300 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <HAL_PWREx_EnableOverDrive+0x90>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_PWREx_EnableOverDrive+0x94>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800232c:	f7ff fcee 	bl	8001d0c <HAL_GetTick>
 8002330:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002332:	e009      	b.n	8002348 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002334:	f7ff fcea 	bl	8001d0c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002342:	d901      	bls.n	8002348 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e01f      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_PWREx_EnableOverDrive+0x98>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d1ee      	bne.n	8002334 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7ff fcd6 	bl	8001d0c <HAL_GetTick>
 8002360:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002362:	e009      	b.n	8002378 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002364:	f7ff fcd2 	bl	8001d0c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002372:	d901      	bls.n	8002378 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e007      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_PWREx_EnableOverDrive+0x98>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002384:	d1ee      	bne.n	8002364 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	420e0040 	.word	0x420e0040
 8002398:	40007000 	.word	0x40007000
 800239c:	420e0044 	.word	0x420e0044

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e25b      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d075      	beq.n	80024aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023be:	4ba3      	ldr	r3, [pc, #652]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d00c      	beq.n	80023e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ca:	4ba0      	ldr	r3, [pc, #640]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d112      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d6:	4b9d      	ldr	r3, [pc, #628]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e2:	d10b      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b99      	ldr	r3, [pc, #612]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05b      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d157      	bne.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e236      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x74>
 8002406:	4b91      	ldr	r3, [pc, #580]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a90      	ldr	r2, [pc, #576]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x98>
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a8a      	ldr	r2, [pc, #552]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a87      	ldr	r2, [pc, #540]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002438:	4b84      	ldr	r3, [pc, #528]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a83      	ldr	r2, [pc, #524]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fc58 	bl	8001d0c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff fc54 	bl	8001d0c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1fb      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0xc0>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff fc44 	bl	8001d0c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff fc40 	bl	8001d0c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e1e7      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	4b6c      	ldr	r3, [pc, #432]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d063      	beq.n	800257e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d116      	bne.n	8002508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x152>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e1bb      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4952      	ldr	r1, [pc, #328]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	e03a      	b.n	800257e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_OscConfig+0x2b0>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7ff fbf9 	bl	8001d0c <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251e:	f7ff fbf5 	bl	8001d0c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e19c      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4940      	ldr	r1, [pc, #256]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_OscConfig+0x2b0>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff fbd8 	bl	8001d0c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002560:	f7ff fbd4 	bl	8001d0c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e17b      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d030      	beq.n	80025ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d016      	beq.n	80025c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <HAL_RCC_OscConfig+0x2b4>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7ff fbb8 	bl	8001d0c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7ff fbb4 	bl	8001d0c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e15b      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x200>
 80025be:	e015      	b.n	80025ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x2b4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7ff fba1 	bl	8001d0c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f7ff fb9d 	bl	8001d0c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e144      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a0 	beq.w	800273a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d121      	bne.n	800267a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7ff fb63 	bl	8001d0c <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e011      	b.n	800266e <HAL_RCC_OscConfig+0x2ce>
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	42470000 	.word	0x42470000
 8002654:	42470e80 	.word	0x42470e80
 8002658:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265c:	f7ff fb56 	bl	8001d0c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e0fd      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b81      	ldr	r3, [pc, #516]	; (8002874 <HAL_RCC_OscConfig+0x4d4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x2f0>
 8002682:	4b7d      	ldr	r3, [pc, #500]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	4a7c      	ldr	r2, [pc, #496]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
 800268e:	e01c      	b.n	80026ca <HAL_RCC_OscConfig+0x32a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x312>
 8002698:	4b77      	ldr	r3, [pc, #476]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a76      	ldr	r2, [pc, #472]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	4b74      	ldr	r3, [pc, #464]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a73      	ldr	r2, [pc, #460]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	e00b      	b.n	80026ca <HAL_RCC_OscConfig+0x32a>
 80026b2:	4b71      	ldr	r3, [pc, #452]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a70      	ldr	r2, [pc, #448]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
 80026be:	4b6e      	ldr	r3, [pc, #440]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a6d      	ldr	r2, [pc, #436]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7ff fb1b 	bl	8001d0c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7ff fb17 	bl	8001d0c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0bc      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCC_OscConfig+0x33a>
 80026fc:	e014      	b.n	8002728 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7ff fb05 	bl	8001d0c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7ff fb01 	bl	8001d0c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0a6      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	4b56      	ldr	r3, [pc, #344]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b52      	ldr	r3, [pc, #328]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a51      	ldr	r2, [pc, #324]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8092 	beq.w	8002868 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002744:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d05c      	beq.n	800280a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d141      	bne.n	80027dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b48      	ldr	r3, [pc, #288]	; (800287c <HAL_RCC_OscConfig+0x4dc>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7ff fad5 	bl	8001d0c <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002766:	f7ff fad1 	bl	8001d0c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e078      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002778:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	019b      	lsls	r3, r3, #6
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	3b01      	subs	r3, #1
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	4933      	ldr	r1, [pc, #204]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ae:	4b33      	ldr	r3, [pc, #204]	; (800287c <HAL_RCC_OscConfig+0x4dc>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff faaa 	bl	8001d0c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7ff faa6 	bl	8001d0c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e04d      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x41c>
 80027da:	e045      	b.n	8002868 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_RCC_OscConfig+0x4dc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff fa93 	bl	8001d0c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff fa8f 	bl	8001d0c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e036      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fc:	4b1e      	ldr	r3, [pc, #120]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x44a>
 8002808:	e02e      	b.n	8002868 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e029      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002816:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_RCC_OscConfig+0x4d8>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	429a      	cmp	r2, r3
 8002828:	d11c      	bne.n	8002864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d115      	bne.n	8002864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800283e:	4013      	ands	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002844:	4293      	cmp	r3, r2
 8002846:	d10d      	bne.n	8002864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40007000 	.word	0x40007000
 8002878:	40023800 	.word	0x40023800
 800287c:	42470060 	.word	0x42470060

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0cc      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002894:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d90c      	bls.n	80028bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0b8      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d020      	beq.n	800290a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a58      	ldr	r2, [pc, #352]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028ec:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a52      	ldr	r2, [pc, #328]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f8:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	494d      	ldr	r1, [pc, #308]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d044      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b47      	ldr	r3, [pc, #284]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d119      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e07f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d003      	beq.n	800293e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293a:	2b03      	cmp	r3, #3
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e06f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294e:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e067      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4934      	ldr	r1, [pc, #208]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002970:	f7ff f9cc 	bl	8001d0c <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	e00a      	b.n	800298e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002978:	f7ff f9c8 	bl	8001d0c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e04f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	4b2b      	ldr	r3, [pc, #172]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 020c 	and.w	r2, r3, #12
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	429a      	cmp	r2, r3
 800299e:	d1eb      	bne.n	8002978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029a0:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d20c      	bcs.n	80029c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b20      	ldr	r3, [pc, #128]	; (8002a38 <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e032      	b.n	8002a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4916      	ldr	r1, [pc, #88]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	490e      	ldr	r1, [pc, #56]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a06:	f000 f821 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002a0a:	4601      	mov	r1, r0
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x1c4>)
 8002a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff f940 	bl	8001cac <HAL_InitTick>

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023c00 	.word	0x40023c00
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	08004060 	.word	0x08004060
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000020 	.word	0x20000020

08002a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a62:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d007      	beq.n	8002a7e <HAL_RCC_GetSysClockFreq+0x32>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d008      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0x38>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 808d 	bne.w	8002b92 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a7a:	60bb      	str	r3, [r7, #8]
       break;
 8002a7c:	e08c      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7e:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCC_GetSysClockFreq+0x160>)
 8002a80:	60bb      	str	r3, [r7, #8]
      break;
 8002a82:	e089      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a84:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8e:	4b45      	ldr	r3, [pc, #276]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d023      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	f04f 0400 	mov.w	r4, #0
 8002aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	ea03 0501 	and.w	r5, r3, r1
 8002ab0:	ea04 0602 	and.w	r6, r4, r2
 8002ab4:	4a3d      	ldr	r2, [pc, #244]	; (8002bac <HAL_RCC_GetSysClockFreq+0x160>)
 8002ab6:	fb02 f106 	mul.w	r1, r2, r6
 8002aba:	2200      	movs	r2, #0
 8002abc:	fb02 f205 	mul.w	r2, r2, r5
 8002ac0:	440a      	add	r2, r1
 8002ac2:	493a      	ldr	r1, [pc, #232]	; (8002bac <HAL_RCC_GetSysClockFreq+0x160>)
 8002ac4:	fba5 0101 	umull	r0, r1, r5, r1
 8002ac8:	1853      	adds	r3, r2, r1
 8002aca:	4619      	mov	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f04f 0400 	mov.w	r4, #0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4623      	mov	r3, r4
 8002ad6:	f7fd fbe3 	bl	80002a0 <__aeabi_uldivmod>
 8002ada:	4603      	mov	r3, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e049      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	f04f 0400 	mov.w	r4, #0
 8002aec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	ea03 0501 	and.w	r5, r3, r1
 8002af8:	ea04 0602 	and.w	r6, r4, r2
 8002afc:	4629      	mov	r1, r5
 8002afe:	4632      	mov	r2, r6
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	f04f 0400 	mov.w	r4, #0
 8002b08:	0154      	lsls	r4, r2, #5
 8002b0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b0e:	014b      	lsls	r3, r1, #5
 8002b10:	4619      	mov	r1, r3
 8002b12:	4622      	mov	r2, r4
 8002b14:	1b49      	subs	r1, r1, r5
 8002b16:	eb62 0206 	sbc.w	r2, r2, r6
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	f04f 0400 	mov.w	r4, #0
 8002b22:	0194      	lsls	r4, r2, #6
 8002b24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b28:	018b      	lsls	r3, r1, #6
 8002b2a:	1a5b      	subs	r3, r3, r1
 8002b2c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b30:	f04f 0100 	mov.w	r1, #0
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	00e2      	lsls	r2, r4, #3
 8002b3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b3e:	00d9      	lsls	r1, r3, #3
 8002b40:	460b      	mov	r3, r1
 8002b42:	4614      	mov	r4, r2
 8002b44:	195b      	adds	r3, r3, r5
 8002b46:	eb44 0406 	adc.w	r4, r4, r6
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	02a2      	lsls	r2, r4, #10
 8002b54:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b58:	0299      	lsls	r1, r3, #10
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	4621      	mov	r1, r4
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f04f 0400 	mov.w	r4, #0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	f7fd fb98 	bl	80002a0 <__aeabi_uldivmod>
 8002b70:	4603      	mov	r3, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0c1b      	lsrs	r3, r3, #16
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	3301      	adds	r3, #1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	60bb      	str	r3, [r7, #8]
      break;
 8002b90:	e002      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b94:	60bb      	str	r3, [r7, #8]
      break;
 8002b96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b98:	68bb      	ldr	r3, [r7, #8]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	00f42400 	.word	0x00f42400
 8002bac:	017d7840 	.word	0x017d7840

08002bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bcc:	f7ff fff0 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4601      	mov	r1, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0a9b      	lsrs	r3, r3, #10
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4a03      	ldr	r2, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08004070 	.word	0x08004070

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf4:	f7ff ffdc 	bl	8002bb0 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0b5b      	lsrs	r3, r3, #13
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4a03      	ldr	r2, [pc, #12]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40023800 	.word	0x40023800
 8002c14:	08004070 	.word	0x08004070

08002c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e03f      	b.n	8002caa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fd fe7e 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f90b 	bl	8002e78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b088      	sub	sp, #32
 8002cb6:	af02      	add	r7, sp, #8
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 8083 	bne.w	8002dda <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_UART_Transmit+0x2e>
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e07b      	b.n	8002ddc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Transmit+0x40>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e074      	b.n	8002ddc <HAL_UART_Transmit+0x12a>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2221      	movs	r2, #33	; 0x21
 8002d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d08:	f7ff f800 	bl	8001d0c <HAL_GetTick>
 8002d0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	88fa      	ldrh	r2, [r7, #6]
 8002d18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d22:	e042      	b.n	8002daa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3a:	d122      	bne.n	8002d82 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2180      	movs	r1, #128	; 0x80
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f84c 	bl	8002de4 <UART_WaitOnFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e042      	b.n	8002ddc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	3302      	adds	r3, #2
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	e017      	b.n	8002daa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	e013      	b.n	8002daa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f829 	bl	8002de4 <UART_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e01f      	b.n	8002ddc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	60ba      	str	r2, [r7, #8]
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1b7      	bne.n	8002d24 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f810 	bl	8002de4 <UART_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e006      	b.n	8002ddc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
  }
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	4613      	mov	r3, r2
 8002df2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df4:	e02c      	b.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dfc:	d028      	beq.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e04:	f7fe ff82 	bl	8001d0c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d21d      	bcs.n	8002e50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e00f      	b.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d0c3      	beq.n	8002df6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002eba:	f023 030c 	bic.w	r3, r3, #12
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee6:	f040 818b 	bne.w	8003200 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4ac1      	ldr	r2, [pc, #772]	; (80031f4 <UART_SetConfig+0x37c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d005      	beq.n	8002f00 <UART_SetConfig+0x88>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4abf      	ldr	r2, [pc, #764]	; (80031f8 <UART_SetConfig+0x380>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	f040 80bd 	bne.w	800307a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f00:	f7ff fe76 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8002f04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	461d      	mov	r5, r3
 8002f0a:	f04f 0600 	mov.w	r6, #0
 8002f0e:	46a8      	mov	r8, r5
 8002f10:	46b1      	mov	r9, r6
 8002f12:	eb18 0308 	adds.w	r3, r8, r8
 8002f16:	eb49 0409 	adc.w	r4, r9, r9
 8002f1a:	4698      	mov	r8, r3
 8002f1c:	46a1      	mov	r9, r4
 8002f1e:	eb18 0805 	adds.w	r8, r8, r5
 8002f22:	eb49 0906 	adc.w	r9, r9, r6
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f3a:	4688      	mov	r8, r1
 8002f3c:	4691      	mov	r9, r2
 8002f3e:	eb18 0005 	adds.w	r0, r8, r5
 8002f42:	eb49 0106 	adc.w	r1, r9, r6
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	f04f 0600 	mov.w	r6, #0
 8002f50:	196b      	adds	r3, r5, r5
 8002f52:	eb46 0406 	adc.w	r4, r6, r6
 8002f56:	461a      	mov	r2, r3
 8002f58:	4623      	mov	r3, r4
 8002f5a:	f7fd f9a1 	bl	80002a0 <__aeabi_uldivmod>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	460c      	mov	r4, r1
 8002f62:	461a      	mov	r2, r3
 8002f64:	4ba5      	ldr	r3, [pc, #660]	; (80031fc <UART_SetConfig+0x384>)
 8002f66:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	461d      	mov	r5, r3
 8002f74:	f04f 0600 	mov.w	r6, #0
 8002f78:	46a9      	mov	r9, r5
 8002f7a:	46b2      	mov	sl, r6
 8002f7c:	eb19 0309 	adds.w	r3, r9, r9
 8002f80:	eb4a 040a 	adc.w	r4, sl, sl
 8002f84:	4699      	mov	r9, r3
 8002f86:	46a2      	mov	sl, r4
 8002f88:	eb19 0905 	adds.w	r9, r9, r5
 8002f8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f90:	f04f 0100 	mov.w	r1, #0
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fa4:	4689      	mov	r9, r1
 8002fa6:	4692      	mov	sl, r2
 8002fa8:	eb19 0005 	adds.w	r0, r9, r5
 8002fac:	eb4a 0106 	adc.w	r1, sl, r6
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	461d      	mov	r5, r3
 8002fb6:	f04f 0600 	mov.w	r6, #0
 8002fba:	196b      	adds	r3, r5, r5
 8002fbc:	eb46 0406 	adc.w	r4, r6, r6
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	f7fd f96c 	bl	80002a0 <__aeabi_uldivmod>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b8b      	ldr	r3, [pc, #556]	; (80031fc <UART_SetConfig+0x384>)
 8002fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	2164      	movs	r1, #100	; 0x64
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	3332      	adds	r3, #50	; 0x32
 8002fe2:	4a86      	ldr	r2, [pc, #536]	; (80031fc <UART_SetConfig+0x384>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ff0:	4498      	add	r8, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	461d      	mov	r5, r3
 8002ff6:	f04f 0600 	mov.w	r6, #0
 8002ffa:	46a9      	mov	r9, r5
 8002ffc:	46b2      	mov	sl, r6
 8002ffe:	eb19 0309 	adds.w	r3, r9, r9
 8003002:	eb4a 040a 	adc.w	r4, sl, sl
 8003006:	4699      	mov	r9, r3
 8003008:	46a2      	mov	sl, r4
 800300a:	eb19 0905 	adds.w	r9, r9, r5
 800300e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003012:	f04f 0100 	mov.w	r1, #0
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800301e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003022:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003026:	4689      	mov	r9, r1
 8003028:	4692      	mov	sl, r2
 800302a:	eb19 0005 	adds.w	r0, r9, r5
 800302e:	eb4a 0106 	adc.w	r1, sl, r6
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	461d      	mov	r5, r3
 8003038:	f04f 0600 	mov.w	r6, #0
 800303c:	196b      	adds	r3, r5, r5
 800303e:	eb46 0406 	adc.w	r4, r6, r6
 8003042:	461a      	mov	r2, r3
 8003044:	4623      	mov	r3, r4
 8003046:	f7fd f92b 	bl	80002a0 <__aeabi_uldivmod>
 800304a:	4603      	mov	r3, r0
 800304c:	460c      	mov	r4, r1
 800304e:	461a      	mov	r2, r3
 8003050:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <UART_SetConfig+0x384>)
 8003052:	fba3 1302 	umull	r1, r3, r3, r2
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2164      	movs	r1, #100	; 0x64
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	3332      	adds	r3, #50	; 0x32
 8003064:	4a65      	ldr	r2, [pc, #404]	; (80031fc <UART_SetConfig+0x384>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	f003 0207 	and.w	r2, r3, #7
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4442      	add	r2, r8
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	e26f      	b.n	800355a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800307a:	f7ff fda5 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 800307e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	461d      	mov	r5, r3
 8003084:	f04f 0600 	mov.w	r6, #0
 8003088:	46a8      	mov	r8, r5
 800308a:	46b1      	mov	r9, r6
 800308c:	eb18 0308 	adds.w	r3, r8, r8
 8003090:	eb49 0409 	adc.w	r4, r9, r9
 8003094:	4698      	mov	r8, r3
 8003096:	46a1      	mov	r9, r4
 8003098:	eb18 0805 	adds.w	r8, r8, r5
 800309c:	eb49 0906 	adc.w	r9, r9, r6
 80030a0:	f04f 0100 	mov.w	r1, #0
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030b4:	4688      	mov	r8, r1
 80030b6:	4691      	mov	r9, r2
 80030b8:	eb18 0005 	adds.w	r0, r8, r5
 80030bc:	eb49 0106 	adc.w	r1, r9, r6
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	461d      	mov	r5, r3
 80030c6:	f04f 0600 	mov.w	r6, #0
 80030ca:	196b      	adds	r3, r5, r5
 80030cc:	eb46 0406 	adc.w	r4, r6, r6
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	f7fd f8e4 	bl	80002a0 <__aeabi_uldivmod>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	461a      	mov	r2, r3
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <UART_SetConfig+0x384>)
 80030e0:	fba3 2302 	umull	r2, r3, r3, r2
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	461d      	mov	r5, r3
 80030ee:	f04f 0600 	mov.w	r6, #0
 80030f2:	46a9      	mov	r9, r5
 80030f4:	46b2      	mov	sl, r6
 80030f6:	eb19 0309 	adds.w	r3, r9, r9
 80030fa:	eb4a 040a 	adc.w	r4, sl, sl
 80030fe:	4699      	mov	r9, r3
 8003100:	46a2      	mov	sl, r4
 8003102:	eb19 0905 	adds.w	r9, r9, r5
 8003106:	eb4a 0a06 	adc.w	sl, sl, r6
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003116:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800311a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800311e:	4689      	mov	r9, r1
 8003120:	4692      	mov	sl, r2
 8003122:	eb19 0005 	adds.w	r0, r9, r5
 8003126:	eb4a 0106 	adc.w	r1, sl, r6
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	461d      	mov	r5, r3
 8003130:	f04f 0600 	mov.w	r6, #0
 8003134:	196b      	adds	r3, r5, r5
 8003136:	eb46 0406 	adc.w	r4, r6, r6
 800313a:	461a      	mov	r2, r3
 800313c:	4623      	mov	r3, r4
 800313e:	f7fd f8af 	bl	80002a0 <__aeabi_uldivmod>
 8003142:	4603      	mov	r3, r0
 8003144:	460c      	mov	r4, r1
 8003146:	461a      	mov	r2, r3
 8003148:	4b2c      	ldr	r3, [pc, #176]	; (80031fc <UART_SetConfig+0x384>)
 800314a:	fba3 1302 	umull	r1, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2164      	movs	r1, #100	; 0x64
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	3332      	adds	r3, #50	; 0x32
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <UART_SetConfig+0x384>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800316a:	4498      	add	r8, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	461d      	mov	r5, r3
 8003170:	f04f 0600 	mov.w	r6, #0
 8003174:	46a9      	mov	r9, r5
 8003176:	46b2      	mov	sl, r6
 8003178:	eb19 0309 	adds.w	r3, r9, r9
 800317c:	eb4a 040a 	adc.w	r4, sl, sl
 8003180:	4699      	mov	r9, r3
 8003182:	46a2      	mov	sl, r4
 8003184:	eb19 0905 	adds.w	r9, r9, r5
 8003188:	eb4a 0a06 	adc.w	sl, sl, r6
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003198:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800319c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031a0:	4689      	mov	r9, r1
 80031a2:	4692      	mov	sl, r2
 80031a4:	eb19 0005 	adds.w	r0, r9, r5
 80031a8:	eb4a 0106 	adc.w	r1, sl, r6
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	461d      	mov	r5, r3
 80031b2:	f04f 0600 	mov.w	r6, #0
 80031b6:	196b      	adds	r3, r5, r5
 80031b8:	eb46 0406 	adc.w	r4, r6, r6
 80031bc:	461a      	mov	r2, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	f7fd f86e 	bl	80002a0 <__aeabi_uldivmod>
 80031c4:	4603      	mov	r3, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <UART_SetConfig+0x384>)
 80031cc:	fba3 1302 	umull	r1, r3, r3, r2
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	2164      	movs	r1, #100	; 0x64
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	3332      	adds	r3, #50	; 0x32
 80031de:	4a07      	ldr	r2, [pc, #28]	; (80031fc <UART_SetConfig+0x384>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	f003 0207 	and.w	r2, r3, #7
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4442      	add	r2, r8
 80031f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031f2:	e1b2      	b.n	800355a <UART_SetConfig+0x6e2>
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40011400 	.word	0x40011400
 80031fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4ad7      	ldr	r2, [pc, #860]	; (8003564 <UART_SetConfig+0x6ec>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d005      	beq.n	8003216 <UART_SetConfig+0x39e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4ad6      	ldr	r2, [pc, #856]	; (8003568 <UART_SetConfig+0x6f0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	f040 80d1 	bne.w	80033b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003216:	f7ff fceb 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 800321a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	469a      	mov	sl, r3
 8003220:	f04f 0b00 	mov.w	fp, #0
 8003224:	46d0      	mov	r8, sl
 8003226:	46d9      	mov	r9, fp
 8003228:	eb18 0308 	adds.w	r3, r8, r8
 800322c:	eb49 0409 	adc.w	r4, r9, r9
 8003230:	4698      	mov	r8, r3
 8003232:	46a1      	mov	r9, r4
 8003234:	eb18 080a 	adds.w	r8, r8, sl
 8003238:	eb49 090b 	adc.w	r9, r9, fp
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003248:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800324c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003250:	4688      	mov	r8, r1
 8003252:	4691      	mov	r9, r2
 8003254:	eb1a 0508 	adds.w	r5, sl, r8
 8003258:	eb4b 0609 	adc.w	r6, fp, r9
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4619      	mov	r1, r3
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	f04f 0400 	mov.w	r4, #0
 800326e:	0094      	lsls	r4, r2, #2
 8003270:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003274:	008b      	lsls	r3, r1, #2
 8003276:	461a      	mov	r2, r3
 8003278:	4623      	mov	r3, r4
 800327a:	4628      	mov	r0, r5
 800327c:	4631      	mov	r1, r6
 800327e:	f7fd f80f 	bl	80002a0 <__aeabi_uldivmod>
 8003282:	4603      	mov	r3, r0
 8003284:	460c      	mov	r4, r1
 8003286:	461a      	mov	r2, r3
 8003288:	4bb8      	ldr	r3, [pc, #736]	; (800356c <UART_SetConfig+0x6f4>)
 800328a:	fba3 2302 	umull	r2, r3, r3, r2
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	469b      	mov	fp, r3
 8003298:	f04f 0c00 	mov.w	ip, #0
 800329c:	46d9      	mov	r9, fp
 800329e:	46e2      	mov	sl, ip
 80032a0:	eb19 0309 	adds.w	r3, r9, r9
 80032a4:	eb4a 040a 	adc.w	r4, sl, sl
 80032a8:	4699      	mov	r9, r3
 80032aa:	46a2      	mov	sl, r4
 80032ac:	eb19 090b 	adds.w	r9, r9, fp
 80032b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032b4:	f04f 0100 	mov.w	r1, #0
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032c8:	4689      	mov	r9, r1
 80032ca:	4692      	mov	sl, r2
 80032cc:	eb1b 0509 	adds.w	r5, fp, r9
 80032d0:	eb4c 060a 	adc.w	r6, ip, sl
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f04f 0400 	mov.w	r4, #0
 80032e6:	0094      	lsls	r4, r2, #2
 80032e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032ec:	008b      	lsls	r3, r1, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	4623      	mov	r3, r4
 80032f2:	4628      	mov	r0, r5
 80032f4:	4631      	mov	r1, r6
 80032f6:	f7fc ffd3 	bl	80002a0 <__aeabi_uldivmod>
 80032fa:	4603      	mov	r3, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	461a      	mov	r2, r3
 8003300:	4b9a      	ldr	r3, [pc, #616]	; (800356c <UART_SetConfig+0x6f4>)
 8003302:	fba3 1302 	umull	r1, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2164      	movs	r1, #100	; 0x64
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	3332      	adds	r3, #50	; 0x32
 8003314:	4a95      	ldr	r2, [pc, #596]	; (800356c <UART_SetConfig+0x6f4>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003320:	4498      	add	r8, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	469b      	mov	fp, r3
 8003326:	f04f 0c00 	mov.w	ip, #0
 800332a:	46d9      	mov	r9, fp
 800332c:	46e2      	mov	sl, ip
 800332e:	eb19 0309 	adds.w	r3, r9, r9
 8003332:	eb4a 040a 	adc.w	r4, sl, sl
 8003336:	4699      	mov	r9, r3
 8003338:	46a2      	mov	sl, r4
 800333a:	eb19 090b 	adds.w	r9, r9, fp
 800333e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800334e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003352:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003356:	4689      	mov	r9, r1
 8003358:	4692      	mov	sl, r2
 800335a:	eb1b 0509 	adds.w	r5, fp, r9
 800335e:	eb4c 060a 	adc.w	r6, ip, sl
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4619      	mov	r1, r3
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	f04f 0400 	mov.w	r4, #0
 8003374:	0094      	lsls	r4, r2, #2
 8003376:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800337a:	008b      	lsls	r3, r1, #2
 800337c:	461a      	mov	r2, r3
 800337e:	4623      	mov	r3, r4
 8003380:	4628      	mov	r0, r5
 8003382:	4631      	mov	r1, r6
 8003384:	f7fc ff8c 	bl	80002a0 <__aeabi_uldivmod>
 8003388:	4603      	mov	r3, r0
 800338a:	460c      	mov	r4, r1
 800338c:	461a      	mov	r2, r3
 800338e:	4b77      	ldr	r3, [pc, #476]	; (800356c <UART_SetConfig+0x6f4>)
 8003390:	fba3 1302 	umull	r1, r3, r3, r2
 8003394:	095b      	lsrs	r3, r3, #5
 8003396:	2164      	movs	r1, #100	; 0x64
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	3332      	adds	r3, #50	; 0x32
 80033a2:	4a72      	ldr	r2, [pc, #456]	; (800356c <UART_SetConfig+0x6f4>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	095b      	lsrs	r3, r3, #5
 80033aa:	f003 020f 	and.w	r2, r3, #15
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4442      	add	r2, r8
 80033b4:	609a      	str	r2, [r3, #8]
 80033b6:	e0d0      	b.n	800355a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7ff fc06 	bl	8002bc8 <HAL_RCC_GetPCLK1Freq>
 80033bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	469a      	mov	sl, r3
 80033c2:	f04f 0b00 	mov.w	fp, #0
 80033c6:	46d0      	mov	r8, sl
 80033c8:	46d9      	mov	r9, fp
 80033ca:	eb18 0308 	adds.w	r3, r8, r8
 80033ce:	eb49 0409 	adc.w	r4, r9, r9
 80033d2:	4698      	mov	r8, r3
 80033d4:	46a1      	mov	r9, r4
 80033d6:	eb18 080a 	adds.w	r8, r8, sl
 80033da:	eb49 090b 	adc.w	r9, r9, fp
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033f2:	4688      	mov	r8, r1
 80033f4:	4691      	mov	r9, r2
 80033f6:	eb1a 0508 	adds.w	r5, sl, r8
 80033fa:	eb4b 0609 	adc.w	r6, fp, r9
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4619      	mov	r1, r3
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	0094      	lsls	r4, r2, #2
 8003412:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	461a      	mov	r2, r3
 800341a:	4623      	mov	r3, r4
 800341c:	4628      	mov	r0, r5
 800341e:	4631      	mov	r1, r6
 8003420:	f7fc ff3e 	bl	80002a0 <__aeabi_uldivmod>
 8003424:	4603      	mov	r3, r0
 8003426:	460c      	mov	r4, r1
 8003428:	461a      	mov	r2, r3
 800342a:	4b50      	ldr	r3, [pc, #320]	; (800356c <UART_SetConfig+0x6f4>)
 800342c:	fba3 2302 	umull	r2, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	469b      	mov	fp, r3
 800343a:	f04f 0c00 	mov.w	ip, #0
 800343e:	46d9      	mov	r9, fp
 8003440:	46e2      	mov	sl, ip
 8003442:	eb19 0309 	adds.w	r3, r9, r9
 8003446:	eb4a 040a 	adc.w	r4, sl, sl
 800344a:	4699      	mov	r9, r3
 800344c:	46a2      	mov	sl, r4
 800344e:	eb19 090b 	adds.w	r9, r9, fp
 8003452:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003456:	f04f 0100 	mov.w	r1, #0
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003462:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003466:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800346a:	4689      	mov	r9, r1
 800346c:	4692      	mov	sl, r2
 800346e:	eb1b 0509 	adds.w	r5, fp, r9
 8003472:	eb4c 060a 	adc.w	r6, ip, sl
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4619      	mov	r1, r3
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	f04f 0400 	mov.w	r4, #0
 8003488:	0094      	lsls	r4, r2, #2
 800348a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	461a      	mov	r2, r3
 8003492:	4623      	mov	r3, r4
 8003494:	4628      	mov	r0, r5
 8003496:	4631      	mov	r1, r6
 8003498:	f7fc ff02 	bl	80002a0 <__aeabi_uldivmod>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b32      	ldr	r3, [pc, #200]	; (800356c <UART_SetConfig+0x6f4>)
 80034a4:	fba3 1302 	umull	r1, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	2164      	movs	r1, #100	; 0x64
 80034ac:	fb01 f303 	mul.w	r3, r1, r3
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	3332      	adds	r3, #50	; 0x32
 80034b6:	4a2d      	ldr	r2, [pc, #180]	; (800356c <UART_SetConfig+0x6f4>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c2:	4498      	add	r8, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	469b      	mov	fp, r3
 80034c8:	f04f 0c00 	mov.w	ip, #0
 80034cc:	46d9      	mov	r9, fp
 80034ce:	46e2      	mov	sl, ip
 80034d0:	eb19 0309 	adds.w	r3, r9, r9
 80034d4:	eb4a 040a 	adc.w	r4, sl, sl
 80034d8:	4699      	mov	r9, r3
 80034da:	46a2      	mov	sl, r4
 80034dc:	eb19 090b 	adds.w	r9, r9, fp
 80034e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034f8:	4689      	mov	r9, r1
 80034fa:	4692      	mov	sl, r2
 80034fc:	eb1b 0509 	adds.w	r5, fp, r9
 8003500:	eb4c 060a 	adc.w	r6, ip, sl
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	4619      	mov	r1, r3
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	f04f 0400 	mov.w	r4, #0
 8003516:	0094      	lsls	r4, r2, #2
 8003518:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800351c:	008b      	lsls	r3, r1, #2
 800351e:	461a      	mov	r2, r3
 8003520:	4623      	mov	r3, r4
 8003522:	4628      	mov	r0, r5
 8003524:	4631      	mov	r1, r6
 8003526:	f7fc febb 	bl	80002a0 <__aeabi_uldivmod>
 800352a:	4603      	mov	r3, r0
 800352c:	460c      	mov	r4, r1
 800352e:	461a      	mov	r2, r3
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <UART_SetConfig+0x6f4>)
 8003532:	fba3 1302 	umull	r1, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2164      	movs	r1, #100	; 0x64
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	3332      	adds	r3, #50	; 0x32
 8003544:	4a09      	ldr	r2, [pc, #36]	; (800356c <UART_SetConfig+0x6f4>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4442      	add	r2, r8
 8003556:	609a      	str	r2, [r3, #8]
}
 8003558:	e7ff      	b.n	800355a <UART_SetConfig+0x6e2>
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003564:	40011000 	.word	0x40011000
 8003568:	40011400 	.word	0x40011400
 800356c:	51eb851f 	.word	0x51eb851f

08003570 <__errno>:
 8003570:	4b01      	ldr	r3, [pc, #4]	; (8003578 <__errno+0x8>)
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000028 	.word	0x20000028

0800357c <__libc_init_array>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	4e0d      	ldr	r6, [pc, #52]	; (80035b4 <__libc_init_array+0x38>)
 8003580:	4c0d      	ldr	r4, [pc, #52]	; (80035b8 <__libc_init_array+0x3c>)
 8003582:	1ba4      	subs	r4, r4, r6
 8003584:	10a4      	asrs	r4, r4, #2
 8003586:	2500      	movs	r5, #0
 8003588:	42a5      	cmp	r5, r4
 800358a:	d109      	bne.n	80035a0 <__libc_init_array+0x24>
 800358c:	4e0b      	ldr	r6, [pc, #44]	; (80035bc <__libc_init_array+0x40>)
 800358e:	4c0c      	ldr	r4, [pc, #48]	; (80035c0 <__libc_init_array+0x44>)
 8003590:	f000 fc56 	bl	8003e40 <_init>
 8003594:	1ba4      	subs	r4, r4, r6
 8003596:	10a4      	asrs	r4, r4, #2
 8003598:	2500      	movs	r5, #0
 800359a:	42a5      	cmp	r5, r4
 800359c:	d105      	bne.n	80035aa <__libc_init_array+0x2e>
 800359e:	bd70      	pop	{r4, r5, r6, pc}
 80035a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035a4:	4798      	blx	r3
 80035a6:	3501      	adds	r5, #1
 80035a8:	e7ee      	b.n	8003588 <__libc_init_array+0xc>
 80035aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035ae:	4798      	blx	r3
 80035b0:	3501      	adds	r5, #1
 80035b2:	e7f2      	b.n	800359a <__libc_init_array+0x1e>
 80035b4:	080040b4 	.word	0x080040b4
 80035b8:	080040b4 	.word	0x080040b4
 80035bc:	080040b4 	.word	0x080040b4
 80035c0:	080040b8 	.word	0x080040b8

080035c4 <memcpy>:
 80035c4:	b510      	push	{r4, lr}
 80035c6:	1e43      	subs	r3, r0, #1
 80035c8:	440a      	add	r2, r1
 80035ca:	4291      	cmp	r1, r2
 80035cc:	d100      	bne.n	80035d0 <memcpy+0xc>
 80035ce:	bd10      	pop	{r4, pc}
 80035d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035d8:	e7f7      	b.n	80035ca <memcpy+0x6>

080035da <memset>:
 80035da:	4402      	add	r2, r0
 80035dc:	4603      	mov	r3, r0
 80035de:	4293      	cmp	r3, r2
 80035e0:	d100      	bne.n	80035e4 <memset+0xa>
 80035e2:	4770      	bx	lr
 80035e4:	f803 1b01 	strb.w	r1, [r3], #1
 80035e8:	e7f9      	b.n	80035de <memset+0x4>

080035ea <strncpy>:
 80035ea:	b570      	push	{r4, r5, r6, lr}
 80035ec:	3901      	subs	r1, #1
 80035ee:	4604      	mov	r4, r0
 80035f0:	b902      	cbnz	r2, 80035f4 <strncpy+0xa>
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
 80035f4:	4623      	mov	r3, r4
 80035f6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80035fa:	f803 5b01 	strb.w	r5, [r3], #1
 80035fe:	1e56      	subs	r6, r2, #1
 8003600:	b92d      	cbnz	r5, 800360e <strncpy+0x24>
 8003602:	4414      	add	r4, r2
 8003604:	42a3      	cmp	r3, r4
 8003606:	d0f4      	beq.n	80035f2 <strncpy+0x8>
 8003608:	f803 5b01 	strb.w	r5, [r3], #1
 800360c:	e7fa      	b.n	8003604 <strncpy+0x1a>
 800360e:	461c      	mov	r4, r3
 8003610:	4632      	mov	r2, r6
 8003612:	e7ed      	b.n	80035f0 <strncpy+0x6>

08003614 <_vsniprintf_r>:
 8003614:	b530      	push	{r4, r5, lr}
 8003616:	1e14      	subs	r4, r2, #0
 8003618:	4605      	mov	r5, r0
 800361a:	b09b      	sub	sp, #108	; 0x6c
 800361c:	4618      	mov	r0, r3
 800361e:	da05      	bge.n	800362c <_vsniprintf_r+0x18>
 8003620:	238b      	movs	r3, #139	; 0x8b
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003628:	b01b      	add	sp, #108	; 0x6c
 800362a:	bd30      	pop	{r4, r5, pc}
 800362c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003630:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003634:	bf14      	ite	ne
 8003636:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800363a:	4623      	moveq	r3, r4
 800363c:	9302      	str	r3, [sp, #8]
 800363e:	9305      	str	r3, [sp, #20]
 8003640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003644:	9100      	str	r1, [sp, #0]
 8003646:	9104      	str	r1, [sp, #16]
 8003648:	f8ad 300e 	strh.w	r3, [sp, #14]
 800364c:	4602      	mov	r2, r0
 800364e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003650:	4669      	mov	r1, sp
 8003652:	4628      	mov	r0, r5
 8003654:	f000 f872 	bl	800373c <_svfiprintf_r>
 8003658:	1c43      	adds	r3, r0, #1
 800365a:	bfbc      	itt	lt
 800365c:	238b      	movlt	r3, #139	; 0x8b
 800365e:	602b      	strlt	r3, [r5, #0]
 8003660:	2c00      	cmp	r4, #0
 8003662:	d0e1      	beq.n	8003628 <_vsniprintf_r+0x14>
 8003664:	9b00      	ldr	r3, [sp, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e7dd      	b.n	8003628 <_vsniprintf_r+0x14>

0800366c <vsniprintf>:
 800366c:	b507      	push	{r0, r1, r2, lr}
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	460a      	mov	r2, r1
 8003674:	4601      	mov	r1, r0
 8003676:	4803      	ldr	r0, [pc, #12]	; (8003684 <vsniprintf+0x18>)
 8003678:	6800      	ldr	r0, [r0, #0]
 800367a:	f7ff ffcb 	bl	8003614 <_vsniprintf_r>
 800367e:	b003      	add	sp, #12
 8003680:	f85d fb04 	ldr.w	pc, [sp], #4
 8003684:	20000028 	.word	0x20000028

08003688 <__ssputs_r>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	688e      	ldr	r6, [r1, #8]
 800368e:	429e      	cmp	r6, r3
 8003690:	4682      	mov	sl, r0
 8003692:	460c      	mov	r4, r1
 8003694:	4690      	mov	r8, r2
 8003696:	4699      	mov	r9, r3
 8003698:	d837      	bhi.n	800370a <__ssputs_r+0x82>
 800369a:	898a      	ldrh	r2, [r1, #12]
 800369c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036a0:	d031      	beq.n	8003706 <__ssputs_r+0x7e>
 80036a2:	6825      	ldr	r5, [r4, #0]
 80036a4:	6909      	ldr	r1, [r1, #16]
 80036a6:	1a6f      	subs	r7, r5, r1
 80036a8:	6965      	ldr	r5, [r4, #20]
 80036aa:	2302      	movs	r3, #2
 80036ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80036b4:	f109 0301 	add.w	r3, r9, #1
 80036b8:	443b      	add	r3, r7
 80036ba:	429d      	cmp	r5, r3
 80036bc:	bf38      	it	cc
 80036be:	461d      	movcc	r5, r3
 80036c0:	0553      	lsls	r3, r2, #21
 80036c2:	d530      	bpl.n	8003726 <__ssputs_r+0x9e>
 80036c4:	4629      	mov	r1, r5
 80036c6:	f000 fb21 	bl	8003d0c <_malloc_r>
 80036ca:	4606      	mov	r6, r0
 80036cc:	b950      	cbnz	r0, 80036e4 <__ssputs_r+0x5c>
 80036ce:	230c      	movs	r3, #12
 80036d0:	f8ca 3000 	str.w	r3, [sl]
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036da:	81a3      	strh	r3, [r4, #12]
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e4:	463a      	mov	r2, r7
 80036e6:	6921      	ldr	r1, [r4, #16]
 80036e8:	f7ff ff6c 	bl	80035c4 <memcpy>
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	6126      	str	r6, [r4, #16]
 80036fa:	6165      	str	r5, [r4, #20]
 80036fc:	443e      	add	r6, r7
 80036fe:	1bed      	subs	r5, r5, r7
 8003700:	6026      	str	r6, [r4, #0]
 8003702:	60a5      	str	r5, [r4, #8]
 8003704:	464e      	mov	r6, r9
 8003706:	454e      	cmp	r6, r9
 8003708:	d900      	bls.n	800370c <__ssputs_r+0x84>
 800370a:	464e      	mov	r6, r9
 800370c:	4632      	mov	r2, r6
 800370e:	4641      	mov	r1, r8
 8003710:	6820      	ldr	r0, [r4, #0]
 8003712:	f000 fa93 	bl	8003c3c <memmove>
 8003716:	68a3      	ldr	r3, [r4, #8]
 8003718:	1b9b      	subs	r3, r3, r6
 800371a:	60a3      	str	r3, [r4, #8]
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	441e      	add	r6, r3
 8003720:	6026      	str	r6, [r4, #0]
 8003722:	2000      	movs	r0, #0
 8003724:	e7dc      	b.n	80036e0 <__ssputs_r+0x58>
 8003726:	462a      	mov	r2, r5
 8003728:	f000 fb4a 	bl	8003dc0 <_realloc_r>
 800372c:	4606      	mov	r6, r0
 800372e:	2800      	cmp	r0, #0
 8003730:	d1e2      	bne.n	80036f8 <__ssputs_r+0x70>
 8003732:	6921      	ldr	r1, [r4, #16]
 8003734:	4650      	mov	r0, sl
 8003736:	f000 fa9b 	bl	8003c70 <_free_r>
 800373a:	e7c8      	b.n	80036ce <__ssputs_r+0x46>

0800373c <_svfiprintf_r>:
 800373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003740:	461d      	mov	r5, r3
 8003742:	898b      	ldrh	r3, [r1, #12]
 8003744:	061f      	lsls	r7, r3, #24
 8003746:	b09d      	sub	sp, #116	; 0x74
 8003748:	4680      	mov	r8, r0
 800374a:	460c      	mov	r4, r1
 800374c:	4616      	mov	r6, r2
 800374e:	d50f      	bpl.n	8003770 <_svfiprintf_r+0x34>
 8003750:	690b      	ldr	r3, [r1, #16]
 8003752:	b96b      	cbnz	r3, 8003770 <_svfiprintf_r+0x34>
 8003754:	2140      	movs	r1, #64	; 0x40
 8003756:	f000 fad9 	bl	8003d0c <_malloc_r>
 800375a:	6020      	str	r0, [r4, #0]
 800375c:	6120      	str	r0, [r4, #16]
 800375e:	b928      	cbnz	r0, 800376c <_svfiprintf_r+0x30>
 8003760:	230c      	movs	r3, #12
 8003762:	f8c8 3000 	str.w	r3, [r8]
 8003766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376a:	e0c8      	b.n	80038fe <_svfiprintf_r+0x1c2>
 800376c:	2340      	movs	r3, #64	; 0x40
 800376e:	6163      	str	r3, [r4, #20]
 8003770:	2300      	movs	r3, #0
 8003772:	9309      	str	r3, [sp, #36]	; 0x24
 8003774:	2320      	movs	r3, #32
 8003776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800377a:	2330      	movs	r3, #48	; 0x30
 800377c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003780:	9503      	str	r5, [sp, #12]
 8003782:	f04f 0b01 	mov.w	fp, #1
 8003786:	4637      	mov	r7, r6
 8003788:	463d      	mov	r5, r7
 800378a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800378e:	b10b      	cbz	r3, 8003794 <_svfiprintf_r+0x58>
 8003790:	2b25      	cmp	r3, #37	; 0x25
 8003792:	d13e      	bne.n	8003812 <_svfiprintf_r+0xd6>
 8003794:	ebb7 0a06 	subs.w	sl, r7, r6
 8003798:	d00b      	beq.n	80037b2 <_svfiprintf_r+0x76>
 800379a:	4653      	mov	r3, sl
 800379c:	4632      	mov	r2, r6
 800379e:	4621      	mov	r1, r4
 80037a0:	4640      	mov	r0, r8
 80037a2:	f7ff ff71 	bl	8003688 <__ssputs_r>
 80037a6:	3001      	adds	r0, #1
 80037a8:	f000 80a4 	beq.w	80038f4 <_svfiprintf_r+0x1b8>
 80037ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ae:	4453      	add	r3, sl
 80037b0:	9309      	str	r3, [sp, #36]	; 0x24
 80037b2:	783b      	ldrb	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 809d 	beq.w	80038f4 <_svfiprintf_r+0x1b8>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037c4:	9304      	str	r3, [sp, #16]
 80037c6:	9307      	str	r3, [sp, #28]
 80037c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037cc:	931a      	str	r3, [sp, #104]	; 0x68
 80037ce:	462f      	mov	r7, r5
 80037d0:	2205      	movs	r2, #5
 80037d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80037d6:	4850      	ldr	r0, [pc, #320]	; (8003918 <_svfiprintf_r+0x1dc>)
 80037d8:	f7fc fd12 	bl	8000200 <memchr>
 80037dc:	9b04      	ldr	r3, [sp, #16]
 80037de:	b9d0      	cbnz	r0, 8003816 <_svfiprintf_r+0xda>
 80037e0:	06d9      	lsls	r1, r3, #27
 80037e2:	bf44      	itt	mi
 80037e4:	2220      	movmi	r2, #32
 80037e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037ea:	071a      	lsls	r2, r3, #28
 80037ec:	bf44      	itt	mi
 80037ee:	222b      	movmi	r2, #43	; 0x2b
 80037f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037f4:	782a      	ldrb	r2, [r5, #0]
 80037f6:	2a2a      	cmp	r2, #42	; 0x2a
 80037f8:	d015      	beq.n	8003826 <_svfiprintf_r+0xea>
 80037fa:	9a07      	ldr	r2, [sp, #28]
 80037fc:	462f      	mov	r7, r5
 80037fe:	2000      	movs	r0, #0
 8003800:	250a      	movs	r5, #10
 8003802:	4639      	mov	r1, r7
 8003804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003808:	3b30      	subs	r3, #48	; 0x30
 800380a:	2b09      	cmp	r3, #9
 800380c:	d94d      	bls.n	80038aa <_svfiprintf_r+0x16e>
 800380e:	b1b8      	cbz	r0, 8003840 <_svfiprintf_r+0x104>
 8003810:	e00f      	b.n	8003832 <_svfiprintf_r+0xf6>
 8003812:	462f      	mov	r7, r5
 8003814:	e7b8      	b.n	8003788 <_svfiprintf_r+0x4c>
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <_svfiprintf_r+0x1dc>)
 8003818:	1a80      	subs	r0, r0, r2
 800381a:	fa0b f000 	lsl.w	r0, fp, r0
 800381e:	4318      	orrs	r0, r3
 8003820:	9004      	str	r0, [sp, #16]
 8003822:	463d      	mov	r5, r7
 8003824:	e7d3      	b.n	80037ce <_svfiprintf_r+0x92>
 8003826:	9a03      	ldr	r2, [sp, #12]
 8003828:	1d11      	adds	r1, r2, #4
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	9103      	str	r1, [sp, #12]
 800382e:	2a00      	cmp	r2, #0
 8003830:	db01      	blt.n	8003836 <_svfiprintf_r+0xfa>
 8003832:	9207      	str	r2, [sp, #28]
 8003834:	e004      	b.n	8003840 <_svfiprintf_r+0x104>
 8003836:	4252      	negs	r2, r2
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	9207      	str	r2, [sp, #28]
 800383e:	9304      	str	r3, [sp, #16]
 8003840:	783b      	ldrb	r3, [r7, #0]
 8003842:	2b2e      	cmp	r3, #46	; 0x2e
 8003844:	d10c      	bne.n	8003860 <_svfiprintf_r+0x124>
 8003846:	787b      	ldrb	r3, [r7, #1]
 8003848:	2b2a      	cmp	r3, #42	; 0x2a
 800384a:	d133      	bne.n	80038b4 <_svfiprintf_r+0x178>
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	1d1a      	adds	r2, r3, #4
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	9203      	str	r2, [sp, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	bfb8      	it	lt
 8003858:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800385c:	3702      	adds	r7, #2
 800385e:	9305      	str	r3, [sp, #20]
 8003860:	4d2e      	ldr	r5, [pc, #184]	; (800391c <_svfiprintf_r+0x1e0>)
 8003862:	7839      	ldrb	r1, [r7, #0]
 8003864:	2203      	movs	r2, #3
 8003866:	4628      	mov	r0, r5
 8003868:	f7fc fcca 	bl	8000200 <memchr>
 800386c:	b138      	cbz	r0, 800387e <_svfiprintf_r+0x142>
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	1b40      	subs	r0, r0, r5
 8003872:	fa03 f000 	lsl.w	r0, r3, r0
 8003876:	9b04      	ldr	r3, [sp, #16]
 8003878:	4303      	orrs	r3, r0
 800387a:	3701      	adds	r7, #1
 800387c:	9304      	str	r3, [sp, #16]
 800387e:	7839      	ldrb	r1, [r7, #0]
 8003880:	4827      	ldr	r0, [pc, #156]	; (8003920 <_svfiprintf_r+0x1e4>)
 8003882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003886:	2206      	movs	r2, #6
 8003888:	1c7e      	adds	r6, r7, #1
 800388a:	f7fc fcb9 	bl	8000200 <memchr>
 800388e:	2800      	cmp	r0, #0
 8003890:	d038      	beq.n	8003904 <_svfiprintf_r+0x1c8>
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <_svfiprintf_r+0x1e8>)
 8003894:	bb13      	cbnz	r3, 80038dc <_svfiprintf_r+0x1a0>
 8003896:	9b03      	ldr	r3, [sp, #12]
 8003898:	3307      	adds	r3, #7
 800389a:	f023 0307 	bic.w	r3, r3, #7
 800389e:	3308      	adds	r3, #8
 80038a0:	9303      	str	r3, [sp, #12]
 80038a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038a4:	444b      	add	r3, r9
 80038a6:	9309      	str	r3, [sp, #36]	; 0x24
 80038a8:	e76d      	b.n	8003786 <_svfiprintf_r+0x4a>
 80038aa:	fb05 3202 	mla	r2, r5, r2, r3
 80038ae:	2001      	movs	r0, #1
 80038b0:	460f      	mov	r7, r1
 80038b2:	e7a6      	b.n	8003802 <_svfiprintf_r+0xc6>
 80038b4:	2300      	movs	r3, #0
 80038b6:	3701      	adds	r7, #1
 80038b8:	9305      	str	r3, [sp, #20]
 80038ba:	4619      	mov	r1, r3
 80038bc:	250a      	movs	r5, #10
 80038be:	4638      	mov	r0, r7
 80038c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038c4:	3a30      	subs	r2, #48	; 0x30
 80038c6:	2a09      	cmp	r2, #9
 80038c8:	d903      	bls.n	80038d2 <_svfiprintf_r+0x196>
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0c8      	beq.n	8003860 <_svfiprintf_r+0x124>
 80038ce:	9105      	str	r1, [sp, #20]
 80038d0:	e7c6      	b.n	8003860 <_svfiprintf_r+0x124>
 80038d2:	fb05 2101 	mla	r1, r5, r1, r2
 80038d6:	2301      	movs	r3, #1
 80038d8:	4607      	mov	r7, r0
 80038da:	e7f0      	b.n	80038be <_svfiprintf_r+0x182>
 80038dc:	ab03      	add	r3, sp, #12
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	4622      	mov	r2, r4
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <_svfiprintf_r+0x1ec>)
 80038e4:	a904      	add	r1, sp, #16
 80038e6:	4640      	mov	r0, r8
 80038e8:	f3af 8000 	nop.w
 80038ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80038f0:	4681      	mov	r9, r0
 80038f2:	d1d6      	bne.n	80038a2 <_svfiprintf_r+0x166>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	065b      	lsls	r3, r3, #25
 80038f8:	f53f af35 	bmi.w	8003766 <_svfiprintf_r+0x2a>
 80038fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038fe:	b01d      	add	sp, #116	; 0x74
 8003900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003904:	ab03      	add	r3, sp, #12
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4622      	mov	r2, r4
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <_svfiprintf_r+0x1ec>)
 800390c:	a904      	add	r1, sp, #16
 800390e:	4640      	mov	r0, r8
 8003910:	f000 f882 	bl	8003a18 <_printf_i>
 8003914:	e7ea      	b.n	80038ec <_svfiprintf_r+0x1b0>
 8003916:	bf00      	nop
 8003918:	08004078 	.word	0x08004078
 800391c:	0800407e 	.word	0x0800407e
 8003920:	08004082 	.word	0x08004082
 8003924:	00000000 	.word	0x00000000
 8003928:	08003689 	.word	0x08003689

0800392c <_printf_common>:
 800392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	4691      	mov	r9, r2
 8003932:	461f      	mov	r7, r3
 8003934:	688a      	ldr	r2, [r1, #8]
 8003936:	690b      	ldr	r3, [r1, #16]
 8003938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800393c:	4293      	cmp	r3, r2
 800393e:	bfb8      	it	lt
 8003940:	4613      	movlt	r3, r2
 8003942:	f8c9 3000 	str.w	r3, [r9]
 8003946:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800394a:	4606      	mov	r6, r0
 800394c:	460c      	mov	r4, r1
 800394e:	b112      	cbz	r2, 8003956 <_printf_common+0x2a>
 8003950:	3301      	adds	r3, #1
 8003952:	f8c9 3000 	str.w	r3, [r9]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	0699      	lsls	r1, r3, #26
 800395a:	bf42      	ittt	mi
 800395c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003960:	3302      	addmi	r3, #2
 8003962:	f8c9 3000 	strmi.w	r3, [r9]
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f015 0506 	ands.w	r5, r5, #6
 800396c:	d107      	bne.n	800397e <_printf_common+0x52>
 800396e:	f104 0a19 	add.w	sl, r4, #25
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	f8d9 2000 	ldr.w	r2, [r9]
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	42ab      	cmp	r3, r5
 800397c:	dc28      	bgt.n	80039d0 <_printf_common+0xa4>
 800397e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003982:	6822      	ldr	r2, [r4, #0]
 8003984:	3300      	adds	r3, #0
 8003986:	bf18      	it	ne
 8003988:	2301      	movne	r3, #1
 800398a:	0692      	lsls	r2, r2, #26
 800398c:	d42d      	bmi.n	80039ea <_printf_common+0xbe>
 800398e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003992:	4639      	mov	r1, r7
 8003994:	4630      	mov	r0, r6
 8003996:	47c0      	blx	r8
 8003998:	3001      	adds	r0, #1
 800399a:	d020      	beq.n	80039de <_printf_common+0xb2>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	68e5      	ldr	r5, [r4, #12]
 80039a0:	f8d9 2000 	ldr.w	r2, [r9]
 80039a4:	f003 0306 	and.w	r3, r3, #6
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	bf08      	it	eq
 80039ac:	1aad      	subeq	r5, r5, r2
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	6922      	ldr	r2, [r4, #16]
 80039b2:	bf0c      	ite	eq
 80039b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b8:	2500      	movne	r5, #0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bfc4      	itt	gt
 80039be:	1a9b      	subgt	r3, r3, r2
 80039c0:	18ed      	addgt	r5, r5, r3
 80039c2:	f04f 0900 	mov.w	r9, #0
 80039c6:	341a      	adds	r4, #26
 80039c8:	454d      	cmp	r5, r9
 80039ca:	d11a      	bne.n	8003a02 <_printf_common+0xd6>
 80039cc:	2000      	movs	r0, #0
 80039ce:	e008      	b.n	80039e2 <_printf_common+0xb6>
 80039d0:	2301      	movs	r3, #1
 80039d2:	4652      	mov	r2, sl
 80039d4:	4639      	mov	r1, r7
 80039d6:	4630      	mov	r0, r6
 80039d8:	47c0      	blx	r8
 80039da:	3001      	adds	r0, #1
 80039dc:	d103      	bne.n	80039e6 <_printf_common+0xba>
 80039de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e6:	3501      	adds	r5, #1
 80039e8:	e7c3      	b.n	8003972 <_printf_common+0x46>
 80039ea:	18e1      	adds	r1, r4, r3
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	2030      	movs	r0, #48	; 0x30
 80039f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f4:	4422      	add	r2, r4
 80039f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039fe:	3302      	adds	r3, #2
 8003a00:	e7c5      	b.n	800398e <_printf_common+0x62>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4622      	mov	r2, r4
 8003a06:	4639      	mov	r1, r7
 8003a08:	4630      	mov	r0, r6
 8003a0a:	47c0      	blx	r8
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d0e6      	beq.n	80039de <_printf_common+0xb2>
 8003a10:	f109 0901 	add.w	r9, r9, #1
 8003a14:	e7d8      	b.n	80039c8 <_printf_common+0x9c>
	...

08003a18 <_printf_i>:
 8003a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a20:	460c      	mov	r4, r1
 8003a22:	7e09      	ldrb	r1, [r1, #24]
 8003a24:	b085      	sub	sp, #20
 8003a26:	296e      	cmp	r1, #110	; 0x6e
 8003a28:	4617      	mov	r7, r2
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	4698      	mov	r8, r3
 8003a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a30:	f000 80b3 	beq.w	8003b9a <_printf_i+0x182>
 8003a34:	d822      	bhi.n	8003a7c <_printf_i+0x64>
 8003a36:	2963      	cmp	r1, #99	; 0x63
 8003a38:	d036      	beq.n	8003aa8 <_printf_i+0x90>
 8003a3a:	d80a      	bhi.n	8003a52 <_printf_i+0x3a>
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	f000 80b9 	beq.w	8003bb4 <_printf_i+0x19c>
 8003a42:	2958      	cmp	r1, #88	; 0x58
 8003a44:	f000 8083 	beq.w	8003b4e <_printf_i+0x136>
 8003a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a50:	e032      	b.n	8003ab8 <_printf_i+0xa0>
 8003a52:	2964      	cmp	r1, #100	; 0x64
 8003a54:	d001      	beq.n	8003a5a <_printf_i+0x42>
 8003a56:	2969      	cmp	r1, #105	; 0x69
 8003a58:	d1f6      	bne.n	8003a48 <_printf_i+0x30>
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	0605      	lsls	r5, r0, #24
 8003a60:	f103 0104 	add.w	r1, r3, #4
 8003a64:	d52a      	bpl.n	8003abc <_printf_i+0xa4>
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6011      	str	r1, [r2, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da03      	bge.n	8003a76 <_printf_i+0x5e>
 8003a6e:	222d      	movs	r2, #45	; 0x2d
 8003a70:	425b      	negs	r3, r3
 8003a72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a76:	486f      	ldr	r0, [pc, #444]	; (8003c34 <_printf_i+0x21c>)
 8003a78:	220a      	movs	r2, #10
 8003a7a:	e039      	b.n	8003af0 <_printf_i+0xd8>
 8003a7c:	2973      	cmp	r1, #115	; 0x73
 8003a7e:	f000 809d 	beq.w	8003bbc <_printf_i+0x1a4>
 8003a82:	d808      	bhi.n	8003a96 <_printf_i+0x7e>
 8003a84:	296f      	cmp	r1, #111	; 0x6f
 8003a86:	d020      	beq.n	8003aca <_printf_i+0xb2>
 8003a88:	2970      	cmp	r1, #112	; 0x70
 8003a8a:	d1dd      	bne.n	8003a48 <_printf_i+0x30>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	f043 0320 	orr.w	r3, r3, #32
 8003a92:	6023      	str	r3, [r4, #0]
 8003a94:	e003      	b.n	8003a9e <_printf_i+0x86>
 8003a96:	2975      	cmp	r1, #117	; 0x75
 8003a98:	d017      	beq.n	8003aca <_printf_i+0xb2>
 8003a9a:	2978      	cmp	r1, #120	; 0x78
 8003a9c:	d1d4      	bne.n	8003a48 <_printf_i+0x30>
 8003a9e:	2378      	movs	r3, #120	; 0x78
 8003aa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa4:	4864      	ldr	r0, [pc, #400]	; (8003c38 <_printf_i+0x220>)
 8003aa6:	e055      	b.n	8003b54 <_printf_i+0x13c>
 8003aa8:	6813      	ldr	r3, [r2, #0]
 8003aaa:	1d19      	adds	r1, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6011      	str	r1, [r2, #0]
 8003ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e08c      	b.n	8003bd6 <_printf_i+0x1be>
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6011      	str	r1, [r2, #0]
 8003ac0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ac4:	bf18      	it	ne
 8003ac6:	b21b      	sxthne	r3, r3
 8003ac8:	e7cf      	b.n	8003a6a <_printf_i+0x52>
 8003aca:	6813      	ldr	r3, [r2, #0]
 8003acc:	6825      	ldr	r5, [r4, #0]
 8003ace:	1d18      	adds	r0, r3, #4
 8003ad0:	6010      	str	r0, [r2, #0]
 8003ad2:	0628      	lsls	r0, r5, #24
 8003ad4:	d501      	bpl.n	8003ada <_printf_i+0xc2>
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e002      	b.n	8003ae0 <_printf_i+0xc8>
 8003ada:	0668      	lsls	r0, r5, #25
 8003adc:	d5fb      	bpl.n	8003ad6 <_printf_i+0xbe>
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	4854      	ldr	r0, [pc, #336]	; (8003c34 <_printf_i+0x21c>)
 8003ae2:	296f      	cmp	r1, #111	; 0x6f
 8003ae4:	bf14      	ite	ne
 8003ae6:	220a      	movne	r2, #10
 8003ae8:	2208      	moveq	r2, #8
 8003aea:	2100      	movs	r1, #0
 8003aec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003af0:	6865      	ldr	r5, [r4, #4]
 8003af2:	60a5      	str	r5, [r4, #8]
 8003af4:	2d00      	cmp	r5, #0
 8003af6:	f2c0 8095 	blt.w	8003c24 <_printf_i+0x20c>
 8003afa:	6821      	ldr	r1, [r4, #0]
 8003afc:	f021 0104 	bic.w	r1, r1, #4
 8003b00:	6021      	str	r1, [r4, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d13d      	bne.n	8003b82 <_printf_i+0x16a>
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	f040 808e 	bne.w	8003c28 <_printf_i+0x210>
 8003b0c:	4665      	mov	r5, ip
 8003b0e:	2a08      	cmp	r2, #8
 8003b10:	d10b      	bne.n	8003b2a <_printf_i+0x112>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	07db      	lsls	r3, r3, #31
 8003b16:	d508      	bpl.n	8003b2a <_printf_i+0x112>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6862      	ldr	r2, [r4, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	bfde      	ittt	le
 8003b20:	2330      	movle	r3, #48	; 0x30
 8003b22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b26:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b2a:	ebac 0305 	sub.w	r3, ip, r5
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	f8cd 8000 	str.w	r8, [sp]
 8003b34:	463b      	mov	r3, r7
 8003b36:	aa03      	add	r2, sp, #12
 8003b38:	4621      	mov	r1, r4
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7ff fef6 	bl	800392c <_printf_common>
 8003b40:	3001      	adds	r0, #1
 8003b42:	d14d      	bne.n	8003be0 <_printf_i+0x1c8>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b48:	b005      	add	sp, #20
 8003b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b4e:	4839      	ldr	r0, [pc, #228]	; (8003c34 <_printf_i+0x21c>)
 8003b50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b54:	6813      	ldr	r3, [r2, #0]
 8003b56:	6821      	ldr	r1, [r4, #0]
 8003b58:	1d1d      	adds	r5, r3, #4
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6015      	str	r5, [r2, #0]
 8003b5e:	060a      	lsls	r2, r1, #24
 8003b60:	d50b      	bpl.n	8003b7a <_printf_i+0x162>
 8003b62:	07ca      	lsls	r2, r1, #31
 8003b64:	bf44      	itt	mi
 8003b66:	f041 0120 	orrmi.w	r1, r1, #32
 8003b6a:	6021      	strmi	r1, [r4, #0]
 8003b6c:	b91b      	cbnz	r3, 8003b76 <_printf_i+0x15e>
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	f022 0220 	bic.w	r2, r2, #32
 8003b74:	6022      	str	r2, [r4, #0]
 8003b76:	2210      	movs	r2, #16
 8003b78:	e7b7      	b.n	8003aea <_printf_i+0xd2>
 8003b7a:	064d      	lsls	r5, r1, #25
 8003b7c:	bf48      	it	mi
 8003b7e:	b29b      	uxthmi	r3, r3
 8003b80:	e7ef      	b.n	8003b62 <_printf_i+0x14a>
 8003b82:	4665      	mov	r5, ip
 8003b84:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b88:	fb02 3311 	mls	r3, r2, r1, r3
 8003b8c:	5cc3      	ldrb	r3, [r0, r3]
 8003b8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b92:	460b      	mov	r3, r1
 8003b94:	2900      	cmp	r1, #0
 8003b96:	d1f5      	bne.n	8003b84 <_printf_i+0x16c>
 8003b98:	e7b9      	b.n	8003b0e <_printf_i+0xf6>
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	6825      	ldr	r5, [r4, #0]
 8003b9e:	6961      	ldr	r1, [r4, #20]
 8003ba0:	1d18      	adds	r0, r3, #4
 8003ba2:	6010      	str	r0, [r2, #0]
 8003ba4:	0628      	lsls	r0, r5, #24
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	d501      	bpl.n	8003bae <_printf_i+0x196>
 8003baa:	6019      	str	r1, [r3, #0]
 8003bac:	e002      	b.n	8003bb4 <_printf_i+0x19c>
 8003bae:	066a      	lsls	r2, r5, #25
 8003bb0:	d5fb      	bpl.n	8003baa <_printf_i+0x192>
 8003bb2:	8019      	strh	r1, [r3, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6123      	str	r3, [r4, #16]
 8003bb8:	4665      	mov	r5, ip
 8003bba:	e7b9      	b.n	8003b30 <_printf_i+0x118>
 8003bbc:	6813      	ldr	r3, [r2, #0]
 8003bbe:	1d19      	adds	r1, r3, #4
 8003bc0:	6011      	str	r1, [r2, #0]
 8003bc2:	681d      	ldr	r5, [r3, #0]
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f7fc fb19 	bl	8000200 <memchr>
 8003bce:	b108      	cbz	r0, 8003bd4 <_printf_i+0x1bc>
 8003bd0:	1b40      	subs	r0, r0, r5
 8003bd2:	6060      	str	r0, [r4, #4]
 8003bd4:	6863      	ldr	r3, [r4, #4]
 8003bd6:	6123      	str	r3, [r4, #16]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bde:	e7a7      	b.n	8003b30 <_printf_i+0x118>
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	462a      	mov	r2, r5
 8003be4:	4639      	mov	r1, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	47c0      	blx	r8
 8003bea:	3001      	adds	r0, #1
 8003bec:	d0aa      	beq.n	8003b44 <_printf_i+0x12c>
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	079b      	lsls	r3, r3, #30
 8003bf2:	d413      	bmi.n	8003c1c <_printf_i+0x204>
 8003bf4:	68e0      	ldr	r0, [r4, #12]
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	4298      	cmp	r0, r3
 8003bfa:	bfb8      	it	lt
 8003bfc:	4618      	movlt	r0, r3
 8003bfe:	e7a3      	b.n	8003b48 <_printf_i+0x130>
 8003c00:	2301      	movs	r3, #1
 8003c02:	464a      	mov	r2, r9
 8003c04:	4639      	mov	r1, r7
 8003c06:	4630      	mov	r0, r6
 8003c08:	47c0      	blx	r8
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d09a      	beq.n	8003b44 <_printf_i+0x12c>
 8003c0e:	3501      	adds	r5, #1
 8003c10:	68e3      	ldr	r3, [r4, #12]
 8003c12:	9a03      	ldr	r2, [sp, #12]
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	42ab      	cmp	r3, r5
 8003c18:	dcf2      	bgt.n	8003c00 <_printf_i+0x1e8>
 8003c1a:	e7eb      	b.n	8003bf4 <_printf_i+0x1dc>
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	f104 0919 	add.w	r9, r4, #25
 8003c22:	e7f5      	b.n	8003c10 <_printf_i+0x1f8>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ac      	bne.n	8003b82 <_printf_i+0x16a>
 8003c28:	7803      	ldrb	r3, [r0, #0]
 8003c2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c32:	e76c      	b.n	8003b0e <_printf_i+0xf6>
 8003c34:	08004089 	.word	0x08004089
 8003c38:	0800409a 	.word	0x0800409a

08003c3c <memmove>:
 8003c3c:	4288      	cmp	r0, r1
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	eb01 0302 	add.w	r3, r1, r2
 8003c44:	d807      	bhi.n	8003c56 <memmove+0x1a>
 8003c46:	1e42      	subs	r2, r0, #1
 8003c48:	4299      	cmp	r1, r3
 8003c4a:	d00a      	beq.n	8003c62 <memmove+0x26>
 8003c4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c50:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c54:	e7f8      	b.n	8003c48 <memmove+0xc>
 8003c56:	4283      	cmp	r3, r0
 8003c58:	d9f5      	bls.n	8003c46 <memmove+0xa>
 8003c5a:	1881      	adds	r1, r0, r2
 8003c5c:	1ad2      	subs	r2, r2, r3
 8003c5e:	42d3      	cmn	r3, r2
 8003c60:	d100      	bne.n	8003c64 <memmove+0x28>
 8003c62:	bd10      	pop	{r4, pc}
 8003c64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c6c:	e7f7      	b.n	8003c5e <memmove+0x22>
	...

08003c70 <_free_r>:
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4605      	mov	r5, r0
 8003c74:	2900      	cmp	r1, #0
 8003c76:	d045      	beq.n	8003d04 <_free_r+0x94>
 8003c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7c:	1f0c      	subs	r4, r1, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	bfb8      	it	lt
 8003c82:	18e4      	addlt	r4, r4, r3
 8003c84:	f000 f8d2 	bl	8003e2c <__malloc_lock>
 8003c88:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <_free_r+0x98>)
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	b933      	cbnz	r3, 8003c9e <_free_r+0x2e>
 8003c90:	6063      	str	r3, [r4, #4]
 8003c92:	6014      	str	r4, [r2, #0]
 8003c94:	4628      	mov	r0, r5
 8003c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c9a:	f000 b8c8 	b.w	8003e2e <__malloc_unlock>
 8003c9e:	42a3      	cmp	r3, r4
 8003ca0:	d90c      	bls.n	8003cbc <_free_r+0x4c>
 8003ca2:	6821      	ldr	r1, [r4, #0]
 8003ca4:	1862      	adds	r2, r4, r1
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	bf04      	itt	eq
 8003caa:	681a      	ldreq	r2, [r3, #0]
 8003cac:	685b      	ldreq	r3, [r3, #4]
 8003cae:	6063      	str	r3, [r4, #4]
 8003cb0:	bf04      	itt	eq
 8003cb2:	1852      	addeq	r2, r2, r1
 8003cb4:	6022      	streq	r2, [r4, #0]
 8003cb6:	6004      	str	r4, [r0, #0]
 8003cb8:	e7ec      	b.n	8003c94 <_free_r+0x24>
 8003cba:	4613      	mov	r3, r2
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	b10a      	cbz	r2, 8003cc4 <_free_r+0x54>
 8003cc0:	42a2      	cmp	r2, r4
 8003cc2:	d9fa      	bls.n	8003cba <_free_r+0x4a>
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	1858      	adds	r0, r3, r1
 8003cc8:	42a0      	cmp	r0, r4
 8003cca:	d10b      	bne.n	8003ce4 <_free_r+0x74>
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	4401      	add	r1, r0
 8003cd0:	1858      	adds	r0, r3, r1
 8003cd2:	4282      	cmp	r2, r0
 8003cd4:	6019      	str	r1, [r3, #0]
 8003cd6:	d1dd      	bne.n	8003c94 <_free_r+0x24>
 8003cd8:	6810      	ldr	r0, [r2, #0]
 8003cda:	6852      	ldr	r2, [r2, #4]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	4401      	add	r1, r0
 8003ce0:	6019      	str	r1, [r3, #0]
 8003ce2:	e7d7      	b.n	8003c94 <_free_r+0x24>
 8003ce4:	d902      	bls.n	8003cec <_free_r+0x7c>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	602b      	str	r3, [r5, #0]
 8003cea:	e7d3      	b.n	8003c94 <_free_r+0x24>
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	1821      	adds	r1, r4, r0
 8003cf0:	428a      	cmp	r2, r1
 8003cf2:	bf04      	itt	eq
 8003cf4:	6811      	ldreq	r1, [r2, #0]
 8003cf6:	6852      	ldreq	r2, [r2, #4]
 8003cf8:	6062      	str	r2, [r4, #4]
 8003cfa:	bf04      	itt	eq
 8003cfc:	1809      	addeq	r1, r1, r0
 8003cfe:	6021      	streq	r1, [r4, #0]
 8003d00:	605c      	str	r4, [r3, #4]
 8003d02:	e7c7      	b.n	8003c94 <_free_r+0x24>
 8003d04:	bd38      	pop	{r3, r4, r5, pc}
 8003d06:	bf00      	nop
 8003d08:	20000130 	.word	0x20000130

08003d0c <_malloc_r>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	1ccd      	adds	r5, r1, #3
 8003d10:	f025 0503 	bic.w	r5, r5, #3
 8003d14:	3508      	adds	r5, #8
 8003d16:	2d0c      	cmp	r5, #12
 8003d18:	bf38      	it	cc
 8003d1a:	250c      	movcc	r5, #12
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	4606      	mov	r6, r0
 8003d20:	db01      	blt.n	8003d26 <_malloc_r+0x1a>
 8003d22:	42a9      	cmp	r1, r5
 8003d24:	d903      	bls.n	8003d2e <_malloc_r+0x22>
 8003d26:	230c      	movs	r3, #12
 8003d28:	6033      	str	r3, [r6, #0]
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	f000 f87d 	bl	8003e2c <__malloc_lock>
 8003d32:	4a21      	ldr	r2, [pc, #132]	; (8003db8 <_malloc_r+0xac>)
 8003d34:	6814      	ldr	r4, [r2, #0]
 8003d36:	4621      	mov	r1, r4
 8003d38:	b991      	cbnz	r1, 8003d60 <_malloc_r+0x54>
 8003d3a:	4c20      	ldr	r4, [pc, #128]	; (8003dbc <_malloc_r+0xb0>)
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	b91b      	cbnz	r3, 8003d48 <_malloc_r+0x3c>
 8003d40:	4630      	mov	r0, r6
 8003d42:	f000 f863 	bl	8003e0c <_sbrk_r>
 8003d46:	6020      	str	r0, [r4, #0]
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f000 f85e 	bl	8003e0c <_sbrk_r>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d124      	bne.n	8003d9e <_malloc_r+0x92>
 8003d54:	230c      	movs	r3, #12
 8003d56:	6033      	str	r3, [r6, #0]
 8003d58:	4630      	mov	r0, r6
 8003d5a:	f000 f868 	bl	8003e2e <__malloc_unlock>
 8003d5e:	e7e4      	b.n	8003d2a <_malloc_r+0x1e>
 8003d60:	680b      	ldr	r3, [r1, #0]
 8003d62:	1b5b      	subs	r3, r3, r5
 8003d64:	d418      	bmi.n	8003d98 <_malloc_r+0x8c>
 8003d66:	2b0b      	cmp	r3, #11
 8003d68:	d90f      	bls.n	8003d8a <_malloc_r+0x7e>
 8003d6a:	600b      	str	r3, [r1, #0]
 8003d6c:	50cd      	str	r5, [r1, r3]
 8003d6e:	18cc      	adds	r4, r1, r3
 8003d70:	4630      	mov	r0, r6
 8003d72:	f000 f85c 	bl	8003e2e <__malloc_unlock>
 8003d76:	f104 000b 	add.w	r0, r4, #11
 8003d7a:	1d23      	adds	r3, r4, #4
 8003d7c:	f020 0007 	bic.w	r0, r0, #7
 8003d80:	1ac3      	subs	r3, r0, r3
 8003d82:	d0d3      	beq.n	8003d2c <_malloc_r+0x20>
 8003d84:	425a      	negs	r2, r3
 8003d86:	50e2      	str	r2, [r4, r3]
 8003d88:	e7d0      	b.n	8003d2c <_malloc_r+0x20>
 8003d8a:	428c      	cmp	r4, r1
 8003d8c:	684b      	ldr	r3, [r1, #4]
 8003d8e:	bf16      	itet	ne
 8003d90:	6063      	strne	r3, [r4, #4]
 8003d92:	6013      	streq	r3, [r2, #0]
 8003d94:	460c      	movne	r4, r1
 8003d96:	e7eb      	b.n	8003d70 <_malloc_r+0x64>
 8003d98:	460c      	mov	r4, r1
 8003d9a:	6849      	ldr	r1, [r1, #4]
 8003d9c:	e7cc      	b.n	8003d38 <_malloc_r+0x2c>
 8003d9e:	1cc4      	adds	r4, r0, #3
 8003da0:	f024 0403 	bic.w	r4, r4, #3
 8003da4:	42a0      	cmp	r0, r4
 8003da6:	d005      	beq.n	8003db4 <_malloc_r+0xa8>
 8003da8:	1a21      	subs	r1, r4, r0
 8003daa:	4630      	mov	r0, r6
 8003dac:	f000 f82e 	bl	8003e0c <_sbrk_r>
 8003db0:	3001      	adds	r0, #1
 8003db2:	d0cf      	beq.n	8003d54 <_malloc_r+0x48>
 8003db4:	6025      	str	r5, [r4, #0]
 8003db6:	e7db      	b.n	8003d70 <_malloc_r+0x64>
 8003db8:	20000130 	.word	0x20000130
 8003dbc:	20000134 	.word	0x20000134

08003dc0 <_realloc_r>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	4607      	mov	r7, r0
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	460e      	mov	r6, r1
 8003dc8:	b921      	cbnz	r1, 8003dd4 <_realloc_r+0x14>
 8003dca:	4611      	mov	r1, r2
 8003dcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003dd0:	f7ff bf9c 	b.w	8003d0c <_malloc_r>
 8003dd4:	b922      	cbnz	r2, 8003de0 <_realloc_r+0x20>
 8003dd6:	f7ff ff4b 	bl	8003c70 <_free_r>
 8003dda:	4625      	mov	r5, r4
 8003ddc:	4628      	mov	r0, r5
 8003dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003de0:	f000 f826 	bl	8003e30 <_malloc_usable_size_r>
 8003de4:	42a0      	cmp	r0, r4
 8003de6:	d20f      	bcs.n	8003e08 <_realloc_r+0x48>
 8003de8:	4621      	mov	r1, r4
 8003dea:	4638      	mov	r0, r7
 8003dec:	f7ff ff8e 	bl	8003d0c <_malloc_r>
 8003df0:	4605      	mov	r5, r0
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d0f2      	beq.n	8003ddc <_realloc_r+0x1c>
 8003df6:	4631      	mov	r1, r6
 8003df8:	4622      	mov	r2, r4
 8003dfa:	f7ff fbe3 	bl	80035c4 <memcpy>
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4638      	mov	r0, r7
 8003e02:	f7ff ff35 	bl	8003c70 <_free_r>
 8003e06:	e7e9      	b.n	8003ddc <_realloc_r+0x1c>
 8003e08:	4635      	mov	r5, r6
 8003e0a:	e7e7      	b.n	8003ddc <_realloc_r+0x1c>

08003e0c <_sbrk_r>:
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4c06      	ldr	r4, [pc, #24]	; (8003e28 <_sbrk_r+0x1c>)
 8003e10:	2300      	movs	r3, #0
 8003e12:	4605      	mov	r5, r0
 8003e14:	4608      	mov	r0, r1
 8003e16:	6023      	str	r3, [r4, #0]
 8003e18:	f7fc fd1c 	bl	8000854 <_sbrk>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d102      	bne.n	8003e26 <_sbrk_r+0x1a>
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	b103      	cbz	r3, 8003e26 <_sbrk_r+0x1a>
 8003e24:	602b      	str	r3, [r5, #0]
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	2000019c 	.word	0x2000019c

08003e2c <__malloc_lock>:
 8003e2c:	4770      	bx	lr

08003e2e <__malloc_unlock>:
 8003e2e:	4770      	bx	lr

08003e30 <_malloc_usable_size_r>:
 8003e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e34:	1f18      	subs	r0, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfbc      	itt	lt
 8003e3a:	580b      	ldrlt	r3, [r1, r0]
 8003e3c:	18c0      	addlt	r0, r0, r3
 8003e3e:	4770      	bx	lr

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
